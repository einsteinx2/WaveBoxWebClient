;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var ApiClient, AppController, Artists, AudioPlayer, DragDrop, KeyboardShortcuts, LoginView, Router;

AudioPlayer = require('./utils/audioPlayer');

ApiClient = require('./utils/apiClient');

Artists = require('./collections/artists');

Router = require('./router');

AppController = require('./views/appView');

KeyboardShortcuts = require('./utils/keyboardShortcuts');

DragDrop = require('./utils/dragDrop');

LoginView = require('./loginView');

$(function() {
  var launch, login;
  if (window.navigator.standalone) {
    $(document.body).addClass("full-screen-web-app");
  }
  window.wavebox = {};
  wavebox.isMobile = function() {
    if (screen.width < 769) {
      return true;
    } else {
      return false;
    }
  };
  wavebox.apiClient = new ApiClient;
  wavebox.dragDrop = new DragDrop;
  launch = function() {
    if (typeof error !== "undefined" && error !== null) {
      console.log(error);
    }
    wavebox.audioPlayer = new AudioPlayer;
    wavebox.appController = new AppController;
    wavebox.keyboardShortcuts = new KeyboardShortcuts;
    wavebox.router = new Router;
    Backbone.history.start();
    return wavebox.appController.render();
  };
  login = new LoginView({
    success: launch,
    error: function() {
      return console.log("an error happened");
    }
  });
  return login.render();
});

},{"./collections/artists":5,"./loginView":11,"./router":24,"./utils/apiClient":25,"./utils/audioPlayer":26,"./utils/dragDrop":27,"./utils/keyboardShortcuts":28,"./views/appView":34}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var ActionSheetItem;

ActionSheetItem = require("../models/actionSheetItem");

module.exports = Backbone.Collection.extend({
  model: ActionSheetItem
});

},{"../models/actionSheetItem":12}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var AlbumArtist, AlbumArtists, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

AlbumArtist = require("../models/albumArtist");

AlbumArtists = (function(_super) {
  __extends(AlbumArtists, _super);

  function AlbumArtists() {
    _ref = AlbumArtists.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  AlbumArtists.prototype.model = AlbumArtist;

  AlbumArtists.prototype.sync = function(method, model, options) {
    var _this = this;
    if (method === "read") {
      console.log("Fetching albumArtists list...");
      return wavebox.apiClient.getAlbumArtistList(function(success, data, positions) {
        if (success) {
          _this.set(data);
          _this.positions = positions;
          return options.success(data);
        } else {
          return options.error(data);
        }
      });
    } else {
      return console.log("Method '" + method + "' is undefined");
    }
  };

  return AlbumArtists;

})(Backbone.Collection);

module.exports = AlbumArtists;

},{"../models/albumArtist":14}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Album, Albums, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Album = require('../models/album');

Albums = (function(_super) {
  __extends(Albums, _super);

  function Albums() {
    _ref = Albums.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Albums.prototype.model = Album;

  Albums.prototype.sync = function(method, model, options) {
    var _this = this;
    if (method === "read") {
      return wavebox.apiClient.getAlbumList(function(success, data, positions) {
        if (success) {
          _this.set(data);
          _this.positions = positions;
          return options.success(data);
        } else {
          return options.error(data);
        }
      });
    } else {
      return console.log("Method '" + method + "' is undefined");
    }
  };

  return Albums;

})(Backbone.Collection);

module.exports = Albums;

},{"../models/album":13}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Artist, Artists, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Artist = require("../models/artist");

Artists = (function(_super) {
  __extends(Artists, _super);

  function Artists() {
    _ref = Artists.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Artists.prototype.model = Artist;

  Artists.prototype.sync = function(method, model, options) {
    var _this = this;
    if (method === "read") {
      console.log("Fetching artists list...");
      return wavebox.apiClient.getArtistList(function(success, data, positions) {
        if (success) {
          _this.set(data);
          _this.positions = positions;
          return options.success(data);
        } else {
          return options.error(data);
        }
      });
    } else {
      return console.log("Method '" + method + "' is undefined");
    }
  };

  return Artists;

})(Backbone.Collection);

module.exports = Artists;

},{"../models/artist":15}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Folder, FolderList, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Folder = require('../models/folder');

FolderList = (function(_super) {
  __extends(FolderList, _super);

  function FolderList() {
    _ref = FolderList.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  FolderList.prototype.model = Folder;

  FolderList.prototype.initialize = function() {
    console.log("hello world");
    return console.log(this.models);
  };

  return FolderList;

})(Backbone.Collection);

window.FolderList = FolderList;

module.exports = FolderList;

},{"../models/folder":16}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Genre, Genres, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Genre = require('../models/genre');

Genres = (function(_super) {
  __extends(Genres, _super);

  function Genres() {
    _ref = Genres.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Genres.prototype.model = Genre;

  Genres.prototype.sync = function(method, model, options) {
    var _this = this;
    if (method === "read") {
      return wavebox.apiClient.getGenreList(function(success, data, positions) {
        if (success) {
          _this.set(data);
          _this.positions = positions;
          return options.success(data);
        } else {
          return options.error(data);
        }
      });
    } else {
      return console.log("Method '" + method + "' is undefined");
    }
  };

  return Genres;

})(Backbone.Collection);

module.exports = Genres;

},{"../models/genre":17}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Playlist;

Playlist = require('../models/playlist');

module.exports = Backbone.Collection.extend({
  model: Playlist,
  sync: function(method, model, options) {
    var _this = this;
    if (method === "read") {
      console.log("Fetching playlists list...");
      return wavebox.apiClient.getPlaylistList(function(success, data, positions) {
        console.log("playlist response success: " + success + " data: ");
        console.log(data);
        if (success) {
          _this.set(data);
          _this.positions = positions;
          return options.success(data);
        } else {
          return options.error(data);
        }
      });
    } else {
      return console.log("Method '" + method + "' is undefined");
    }
  }
});

},{"../models/playlist":18}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var SidebarItem;

SidebarItem = require("../models/sidebaritem");

module.exports = Backbone.Collection.extend({
  model: SidebarItem,
  sync: function(method, model, options) {
    if (method === "read") {
      return console.log("fetching playlists");
    } else {
      return console.log("Method '" + method + "' is undefined");
    }
  }
});

},{"../models/sidebaritem":22}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Track, TrackList, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Track = require('../models/track');

TrackList = (function(_super) {
  __extends(TrackList, _super);

  function TrackList() {
    _ref = TrackList.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TrackList.prototype.model = Track;

  return TrackList;

})(Backbone.Collection);

module.exports = TrackList;

},{"../models/track":23}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var LoginView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

LoginView = (function(_super) {
  __extends(LoginView, _super);

  function LoginView() {
    _ref = LoginView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  LoginView.prototype.el = "#login";

  LoginView.prototype.template = _.template($("#template-login").html());

  LoginView.prototype.events = {
    "keydown": "keydown",
    "click #login-submit": "login"
  };

  LoginView.prototype.initialize = function(options) {
    if (options.success != null) {
      this.success = options.success;
    }
    if (options.error != null) {
      this.error = options.error;
    }
    return console.log("Login initialized");
  };

  LoginView.prototype.render = function() {
    var _this = this;
    if (wavebox.apiClient.SESSION_ID != null) {
      this.$el.append("<div class='login-checking'>Checking session...</div>");
      wavebox.apiClient.clientIsAuthenticated(function(authenticated) {
        if (authenticated) {
          _this.$el.hide();
          _this.undelegateEvents();
          return _this.success();
        } else {
          return _this.renderLogin();
        }
      });
    } else {
      this.renderLogin();
    }
    return this;
  };

  LoginView.prototype.renderLogin = function() {
    this.$el.empty().append(this.template());
    this.$el.show();
    return this.$el.find("#login-username").focus();
  };

  LoginView.prototype.keydown = function(e) {
    if (e.keyCode === 13) {
      this.login();
    }
    return true;
  };

  LoginView.prototype.login = function() {
    var l, password, username,
      _this = this;
    l = Ladda.create(document.querySelector('.login-form-button'));
    l.start();
    username = $("#login-username").val();
    password = $("#login-password").val();
    return wavebox.apiClient.authenticate(username, password, function(success, error) {
      if (success) {
        _this.$el.hide();
        _this.undelegateEvents();
        return _this.success();
      } else {
        _this.error(error);
        l.stop();
        return _this.$el.append("nope nope nope");
      }
    });
  };

  return LoginView;

})(Backbone.View);

module.exports = LoginView;

},{}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var ActionSheetItem, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ActionSheetItem = (function(_super) {
  __extends(ActionSheetItem, _super);

  function ActionSheetItem() {
    _ref = ActionSheetItem.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ActionSheetItem.prototype.defaults = {
    itemTitle: "",
    itemClass: "",
    action: null,
    href: "",
    enabled: true
  };

  return ActionSheetItem;

})(Backbone.Model);

module.exports = ActionSheetItem;

},{}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Album, TrackList, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TrackList = require('../collections/tracklist');

Album = (function(_super) {
  __extends(Album, _super);

  function Album() {
    _ref = Album.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Album.prototype.defaults = {
    albumId: null,
    albumName: null,
    artId: null,
    albumArtistId: null,
    albumArtistName: null,
    itemTypeId: null,
    releaseYear: null,
    tracks: null
  };

  Album.prototype.initialize = function(options) {
    return this.albumId = options.albumId;
  };

  Album.prototype.pageUrl = function() {
    return "/#albums/" + (this.get("albumId"));
  };

  Album.prototype.coverViewFields = function() {
    return {
      title: this.get("albumName"),
      artist: this.get("artistName"),
      artId: this.get("artId")
    };
  };

  Album.prototype.sync = function(method, model, options) {
    var _this = this;
    if (method === "read") {
      return wavebox.apiClient.getAlbum(this.albumId, function(success, data) {
        var album;
        if (success) {
          album = data.albums[0];
          return _this.set({
            albumId: album.albumId,
            albumName: album.albumName,
            artId: album.artId,
            artistId: album.artistId,
            artistName: album.artistName,
            itemTypeId: album.itemTypeId,
            releaseYear: album.releaseYear,
            tracks: new TrackList(data.songs, {
              comparator: "trackNumber"
            })
          });
        }
      });
    }
  };

  return Album;

})(Backbone.Model);

module.exports = Album;

},{"../collections/tracklist":10}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var AlbumArtist, AlbumList, TrackList, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

AlbumList = require('../collections/albums');

TrackList = require('../collections/tracklist');

AlbumArtist = (function(_super) {
  __extends(AlbumArtist, _super);

  function AlbumArtist() {
    _ref = AlbumArtist.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  AlbumArtist.prototype.defaults = {
    artId: null,
    albumArtistId: null,
    albumArtistName: null,
    itemTypeId: null,
    albums: null,
    tracks: null
  };

  AlbumArtist.prototype.initialize = function(options) {
    var artistId;
    artistId = options.albumArtistId != null ? options.albumArtistId : options.artistId;
    this.albumArtistId = artistId != null ? artistId : null;
    this.set("albumArtistId", this.albumArtistId);
    return this.shouldRetrieveSongs = options.retrieveSongs != null ? options.retrieveSongs : false;
  };

  AlbumArtist.prototype.url = function() {
    return "/api/albumartists/" + (this.get("albumArtistId"));
  };

  AlbumArtist.prototype.pageUrl = function() {
    return "/#albumartists/" + (this.get("albumArtistId"));
  };

  AlbumArtist.prototype.coverViewFields = function() {
    return {
      title: this.get("albumArtistName"),
      artId: this.get("artId"),
      musicBrainzId: this.get("musicBrainzId")
    };
  };

  AlbumArtist.prototype.sync = function(method, model, options) {
    var _this = this;
    console.log("TEST sync called with method " + method);
    if (method === "read") {
      console.log(this.shouldRetrieveSongs);
      return wavebox.apiClient.getAlbumArtist(this.albumArtistId, this.shouldRetrieveSongs, function(success, data) {
        var hash;
        console.log("TEST album artist loaded");
        if (success) {
          hash = data.albumArtists[0];
          hash.albums = new AlbumList(data.albums);
          hash.tracks = new TrackList(data.songs);
          hash.counts = data.counts;
          console.log(data);
          console.log(hash.tracks);
          return _this.set(hash);
        } else {
          console.log("artistInfo!");
          return console.log(data);
        }
      });
    }
  };

  AlbumArtist.prototype.retrieveSongs = function() {
    this.shouldRetrieveSongs = true;
    return this.fetch();
  };

  return AlbumArtist;

})(Backbone.Model);

module.exports = AlbumArtist;

},{"../collections/albums":4,"../collections/tracklist":10}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var AlbumList, Artist, TrackList, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

AlbumList = require('../collections/albums');

TrackList = require('../collections/tracklist');

Artist = (function(_super) {
  __extends(Artist, _super);

  function Artist() {
    _ref = Artist.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Artist.prototype.defaults = {
    artId: null,
    artistId: null,
    artistName: null,
    itemTypeId: null,
    albums: null,
    tracks: null,
    counts: null,
    musicBrainzId: null
  };

  Artist.prototype.initialize = function(options) {
    this.artistId = options.artistId != null ? options.artistId : null;
    return this.shouldRetrieveSongs = options.retrieveSongs != null ? options.retrieveSongs : false;
  };

  Artist.prototype.pageUrl = function() {
    return "/artists/" + (this.get("artistId"));
  };

  Artist.prototype.coverViewFields = function() {
    return {
      title: this.get("artistName"),
      artId: this.get("artId"),
      musicBrainzId: this.get("musicBrainzId")
    };
  };

  Artist.prototype.sync = function(method, model, options) {
    var _this = this;
    if (method === "read") {
      console.log("ARTISTID: " + this.artistId);
      console.log(this.shouldRetrieveSongs);
      return wavebox.apiClient.getArtist(this.artistId, this.shouldRetrieveSongs, function(success, data) {
        var hash;
        if (success) {
          hash = data.artists[0];
          hash.albums = new AlbumList(data.albums);
          hash.tracks = new TrackList(data.songs);
          hash.counts = data.counts;
          return _this.set(hash);
        }
      });
    }
  };

  Artist.prototype.retrieveSongs = function() {
    this.shouldRetrieveSongs = true;
    return this.fetch();
  };

  return Artist;

})(Backbone.Model);

module.exports = Artist;

},{"../collections/albums":4,"../collections/tracklist":10}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Folder, FolderList, TrackList, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

FolderList = require('../collections/folderlist');

TrackList = require('../collections/tracklist');

Folder = (function(_super) {
  __extends(Folder, _super);

  function Folder() {
    _ref = Folder.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Folder.prototype.defaults = {
    folderId: null,
    folderName: null,
    parentFolderId: null,
    mediaFolderId: null,
    folderPath: null,
    artId: null,
    folders: null,
    tracks: null
  };

  Folder.prototype.initialize = function(options) {
    if (options != null) {
      this.folderId = options.folderId || null;
      return this.recursive = options.recursive || false;
    }
  };

  Folder.prototype.pageUrl = function() {
    return "/folders/" + (this.get("folderId"));
  };

  Folder.prototype.coverViewFields = function() {
    return {
      title: this.get("folderName"),
      artId: this.get("artId")
    };
  };

  Folder.prototype.sync = function(method, model, options) {
    var _this = this;
    if (method === "read") {
      return wavebox.apiClient.getFolder(this.folderId, this.recursive, function(success, data) {
        var folderModels, theFolder;
        if (success) {
          folderModels = _.map(data.folders, function(item) {
            return new Folder(item);
          });
          theFolder = data.containingFolder || {};
          theFolder.folders = new Backbone.Collection(folderModels);
          theFolder.folders.positions = data.sectionPositions;
          theFolder.tracks = new TrackList(data.songs, {
            comparator: "trackNumber"
          });
          return _this.set(theFolder);
        } else {
          return options.error(data);
        }
      });
    }
  };

  return Folder;

})(Backbone.Model);

module.exports = Folder;

},{"../collections/folderlist":6,"../collections/tracklist":10}],17:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Albums, Artists, Folders, Genre, TrackList, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Artists = require('../collections/artists');

Albums = require('../collections/albums');

TrackList = require('../collections/tracklist');

Folders = require('../collections/folderlist');

Genre = (function(_super) {
  __extends(Genre, _super);

  function Genre() {
    _ref = Genre.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Genre.prototype.defaults = {
    GenreId: null,
    GenreName: null,
    Folders: null,
    Artists: null,
    Albums: null,
    Tracks: null
  };

  Genre.prototype.initialize = function(attributes, options) {
    var _this = this;
    if (options.genreId != null) {
      this.set("GenreId", options.genreId);
      this.set("id", options.genreId);
    }
    this.fetched = false;
    return this.on("request", function() {
      return _this.fetched = true;
    });
  };

  Genre.prototype.url = function() {
    return "/api/genres/" + (this.get("GenreId"));
  };

  Genre.prototype.pageUrl = function() {
    return "/genres/" + (this.get("GenreId"));
  };

  Genre.prototype.coverViewFields = function() {
    return {
      title: this.get("GenreName", {
        artId: null
      })
    };
  };

  Genre.prototype.parse = function(response, options) {
    var hash;
    hash = {};
    if (this.fetched) {
      hash.folders = new Folders(response.folders);
      hash.artists = new Artists(response.artists);
      hash.albums = new Albums(response.albums);
      hash.tracks = new TrackList(response.songs);
    } else {
      hash = response;
    }
    return hash;
  };

  return Genre;

})(Backbone.Model);

module.exports = Genre;

},{"../collections/albums":4,"../collections/artists":5,"../collections/folderlist":6,"../collections/tracklist":10}],18:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Playlist, TrackList, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TrackList = require('../collections/tracklist');

Playlist = (function(_super) {
  __extends(Playlist, _super);

  function Playlist() {
    _ref = Playlist.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Playlist.prototype.url = function() {
    return "/api/playlists/" + (this.get("id"));
  };

  Playlist.prototype.pageUrl = function() {
    return "/playlists/" + (this.get("id"));
  };

  Playlist.prototype.defaults = {
    id: null,
    name: null,
    count: null,
    duration: null,
    md5Hash: null,
    lastUpdateTime: null,
    tracks: null
  };

  Playlist.prototype.initialize = function(options) {
    if (options != null) {
      return this.set("id", options.id || null);
    }
  };

  Playlist.prototype.coverViewFields = function() {
    return {
      title: this.get("playlistName"),
      artId: this.get("artId")
    };
  };

  Playlist.prototype.parse = function(response, options) {
    var hash;
    if ((response.playlists != null) && (response.mediaItems != null)) {
      hash = response.playlists[0];
      hash.tracks = new TrackList(response.mediaItems);
      return hash;
    } else {
      return response;
    }
  };

  return Playlist;

})(Backbone.Model);

module.exports = Playlist;

},{"../collections/tracklist":10}],19:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var PlayQueue, TrackList, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TrackList = require('../collections/tracklist');

PlayQueue = (function(_super) {
  __extends(PlayQueue, _super);

  function PlayQueue() {
    this.clear = __bind(this.clear, this);
    _ref = PlayQueue.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  PlayQueue.prototype.initialize = function() {
    var normalTracks, nowPlayingIndex, shuffleTracks;
    console.log("Readying the play queue...");
    if (typeof localStorage !== "undefined" && localStorage !== null) {
      normalTracks = JSON.parse(localStorage.getItem("wbNormalTracks"));
      shuffleTracks = JSON.parse(localStorage.getItem("wbShuffleTracks"));
      nowPlayingIndex = parseInt(localStorage.getItem("wbNowPlayingIndex"));
      if (shuffleTracks != null) {
        this.tracks = new TrackList(shuffleTracks);
        this.toggleTracks = new TrackList(normalTracks);
        this.shuffle = true;
      } else if (normalTracks != null) {
        this.tracks = new TrackList(normalTracks);
        this.shuffle = false;
      } else {
        this.tracks = new TrackList;
        this.shuffle = false;
      }
      if (nowPlayingIndex != null) {
        this.set("nowPlayingIndex", nowPlayingIndex);
      } else {
        this.set("nowPlayingIndex", 0);
      }
    } else {
      this.tracks = new TrackList;
      this.set("shuffle", false);
      this.set("repeat", false);
      this.set("nowPlayingIndex", 0);
    }
    console.log("REGISTERING");
    return this.on("change", this.localSave);
  };

  PlayQueue.prototype.add = function(track, at) {
    if (at == null) {
      at = void 0;
    }
    if (track == null) {
      return;
    }
    this.tracks.add(track, {
      at: at
    });
    this.trigger("change");
    if (this.tracks.length === 1) {
      return wavebox.audioPlayer.playAt(0, 0);
    }
  };

  PlayQueue.prototype.remove = function(index) {
    if (index == null) {
      return;
    }
    this.tracks.remove(this.tracks.at(index));
    return this.trigger("change");
  };

  PlayQueue.prototype.addNext = function(track) {
    this.tracks.add(track, {
      at: this.get("nowPlayingIndex") + 1
    });
    return this.trigger("change");
  };

  PlayQueue.prototype.move = function(track, toIndex) {
    var oldIndex;
    oldIndex = _.indexOf(this.tracks.models, track);
    if (this.get("nowPlayingIndex") === oldIndex) {
      this.set("nowPlayingIndex", toIndex);
    }
    console.log(oldIndex, toIndex);
    this.tracks.models.splice(toIndex, 0, this.tracks.models.splice(oldIndex, 1)[0]);
    console.log("moved!");
    return this.trigger("change");
  };

  PlayQueue.prototype.clear = function() {
    this.tracks = new TrackList;
    this.unset("nowPlayingIndex");
    wavebox.audioPlayer.setPlayerSong(null);
    return this.trigger("change");
  };

  PlayQueue.prototype.currentSong = function() {
    if (this.get("nowPlayingIndex") != null) {
      return this.tracks.at(this.get("nowPlayingIndex"));
    } else {
      return null;
    }
  };

  PlayQueue.prototype.shuffleToggle = function() {
    var current, shuffle, shuffled;
    shuffle = !this.get("shuffle");
    this.set("shuffle", shuffle);
    if (shuffle) {
      this.set("normalOrder", _.clone(this.tracks));
      shuffled = _.shuffle(this.tracks.models);
      current = this.tracks.at(this.get("nowPlayingIndex"));
      this.tracks = new TrackList(shuffled);
      this.set("nowPlayingIndex", this.tracks.indexOf(current));
    } else {
      current = this.tracks.at(this.get("nowPlayingIndex"));
      this.tracks = this.get("normalOrder");
      this.set("nowPlayingIndex", this.tracks.indexOf(current));
      this.unset("normalOrder");
    }
    return this.trigger("change");
  };

  PlayQueue.prototype.repeatToggle = function() {
    return this.set("repeat", (function() {
      switch (this.get("repeat")) {
        case false:
          return "one";
        case "one":
          return "all";
        default:
          return false;
      }
    }).call(this));
  };

  PlayQueue.prototype.localSave = function() {
    if (this.shuffle) {
      localStorage.setItem("wbNormalTracks", JSON.stringify(this.get("normalOrder")));
      localStorage.setItem("wbShuffleTracks", JSON.stringify(this.tracks));
      localStorage.setItem("wbNowPlayingIndex", this.get("nowPlayingIndex"));
    } else {
      localStorage.clear("wbShuffleTracks");
      localStorage.setItem("wbNormalTracks", JSON.stringify(this.tracks));
      localStorage.setItem("wbNowPlayingIndex", this.get("nowPlayingIndex"));
    }
    return this.localSavePlayState();
  };

  PlayQueue.prototype.localSavePlayState = function(percent) {
    if (percent != null) {
      localStorage.setItem("wbElapsed", this.currentSong().get("duration") * (percent / 100));
    } else {
      localStorage.setItem("wbElapsed", wavebox.audioPlayer.get("elapsed"));
    }
    return localStorage.setItem("wbPlayState", wavebox.audioPlayer.playing());
  };

  PlayQueue.prototype.timeUpdate = function() {
    var elapsed;
    elapsed = wavebox.audioPlayer.get("elapsed");
    if (this.lastElapsed == null) {
      this.lastElapsed = elapsed;
    }
    if (Math.abs(elapsed - this.lastElapsed) > 5) {
      this.localSavePlayState();
      return this.lastElapsed = elapsed;
    }
  };

  return PlayQueue;

})(Backbone.Model);

module.exports = PlayQueue;

},{"../collections/tracklist":10}],20:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.ServerSearch = (function(_super) {
  __extends(ServerSearch, _super);

  function ServerSearch() {
    _ref = ServerSearch.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ServerSearch.prototype.urlRoot = "/api/search";

  ServerSearch.prototype.defaults = {
    results: null
  };

  ServerSearch.prototype.initialize = function() {
    return this.on("change:query", this.search);
  };

  ServerSearch.prototype.search = function() {
    var query;
    query = this.get("query");
    if (!(query === "" || query === null)) {
      return this.fetch({
        data: {
          query: query,
          limit: 5
        }
      });
    } else {
      return this.set("results", null);
    }
  };

  ServerSearch.prototype.parse = function(response, options) {
    var hash;
    hash = {
      results: response
    };
    return hash;
  };

  return ServerSearch;

})(Backbone.Model);

module.exports = ServerSearch;

},{}],21:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Settings, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Settings = (function(_super) {
  __extends(Settings, _super);

  function Settings() {
    _ref = Settings.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Settings.prototype.url = "/api/settings";

  Settings.prototype.initialize = function() {};

  Settings.prototype.parse = function(response, options) {
    var hash;
    hash = response.settings;
    hash.error = response.error;
    return hash;
  };

  return Settings;

})(Backbone.Model);

module.exports = Settings;

},{}],22:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var SidebarItem, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SidebarItem = (function(_super) {
  __extends(SidebarItem, _super);

  function SidebarItem() {
    _ref = SidebarItem.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  SidebarItem.prototype.defaults = {
    title: "",
    className: "",
    enabled: true
  };

  return SidebarItem;

})(Backbone.Model);

module.exports = SidebarItem;

},{}],23:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Track, Utils, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Utils = require('../utils/utils');

Track = (function(_super) {
  __extends(Track, _super);

  function Track() {
    _ref = Track.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Track.prototype.defaults = {
    itemTypeId: null,
    artistId: null,
    artistName: null,
    albumArtistId: null,
    albumArtistName: null,
    albumId: null,
    songName: null,
    trackNumber: null,
    discNumber: null,
    releaseYear: null,
    itemId: null,
    folderId: null,
    fileType: null,
    duration: null,
    bitrate: null,
    fileSize: null,
    lastModified: null,
    fileName: null,
    genreId: null,
    genreName: null,
    artId: null
  };

  Track.prototype.url = function() {
    return "/api/songs/" + (this.get("itemId"));
  };

  Track.prototype.formattedDuration = function() {
    if ((this.get("duration")) != null) {
      return Utils.formattedTimeWithSeconds(this.get("duration"));
    } else {
      return null;
    }
  };

  Track.prototype.coverViewFields = function() {
    return {
      title: this.get("songName"),
      subtitle: this.get("artistName"),
      artId: this.get("artId")
    };
  };

  return Track;

})(Backbone.Model);

module.exports = Track;

},{"../utils/utils":29}],24:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var AlbumListingView, AlbumsView, ArtistView, ArtistsView, FolderView, GenresView, LoginView, PlaylistListingView, SettingsView;

ArtistsView = require('./views/artists/artistsview');

ArtistView = require('./views/artist/artistview');

AlbumsView = require('./views/albums/albumsview');

AlbumListingView = require('./views/artistAlbum/albumlistingview');

GenresView = require('./views/genresView');

FolderView = require('./views/folder/folderview');

PlaylistListingView = require('./views/playlists/playlistListingView');

SettingsView = require('./views/settingsView');

LoginView = require('./loginView');

module.exports = Backbone.Router.extend({
  routes: {
    "albumartists(/:artistId)": "albumArtists",
    "artists(/:artistId)": "artists",
    "folders(/:folderId)": "folders",
    "albums(/:albumId)": "albums",
    "genres(/:genreId)": "genres",
    "playlists/:playlistId": "playlists",
    "favorites": "favorites",
    "settings": "settings",
    "login": "login",
    "*path": "home"
  },
  albumArtists: function(albumArtistId) {
    console.log("nav albumartists " + (Date.now()));
    if (albumArtistId != null) {
      wavebox.appController.mainView.push(new ArtistView({
        artistId: albumArtistId,
        isAlbumArtist: true
      }));
      console.log("new view push submit " + (Date.now()));
    } else {
      this.sendSelectionNotification("Artists");
      wavebox.appController.mainView.push(new ArtistsView({
        isAlbumArtist: true
      }));
    }
    if (wavebox.isMobile()) {
      return wavebox.appController.panels.focusMain();
    }
  },
  artists: function(artistId) {
    console.log("nav artists " + (Date.now()));
    if (artistId != null) {
      wavebox.appController.mainView.push(new ArtistView({
        artistId: artistId
      }));
      console.log("new view push submit " + (Date.now()));
    } else {
      this.sendSelectionNotification("Artists");
      wavebox.appController.mainView.push(new ArtistsView);
    }
    if (wavebox.isMobile()) {
      return wavebox.appController.panels.focusMain();
    }
  },
  folders: function(folderId) {
    if (folderId != null) {
      wavebox.appController.mainView.push(new FolderView({
        folderId: folderId,
        isSubFolder: true
      }));
    } else {
      this.sendSelectionNotification("Folders");
      wavebox.appController.mainView.push(new FolderView);
    }
    if (wavebox.isMobile()) {
      return wavebox.appController.panels.focusMain();
    }
  },
  albums: function(albumId) {
    if (albumId != null) {
      wavebox.appController.mainView.push(new AlbumListingView({
        albumId: albumId
      }));
    } else {
      this.sendSelectionNotification("Albums");
      wavebox.appController.mainView.push(new AlbumsView);
    }
    if (wavebox.isMobile()) {
      return wavebox.appController.panels.focusMain();
    }
  },
  genres: function(genreId) {
    this.sendSelectionNotification("Genres");
    console.log(genreId);
    if (genreId != null) {
      wavebox.appController.mainView.push(new ArtistsView({
        genreId: genreId
      }));
    } else {
      wavebox.appController.mainView.push(new GenresView);
    }
    if (wavebox.isMobile()) {
      return wavebox.appController.panels.focusMain();
    }
  },
  playlists: function(playlistId) {
    this.sendSelectionNotification("playlist " + playlistId);
    console.log("router playlists for id: " + playlistId);
    if (playlistId != null) {
      wavebox.appController.mainView.push(new PlaylistListingView({
        playlistId: playlistId
      }));
    }
    if (wavebox.isMobile()) {
      return wavebox.appController.panels.focusMain();
    }
  },
  favorites: function() {
    return null;
  },
  settings: function() {
    this.sendSelectionNotification("Settings");
    wavebox.appController.mainView.push(new SettingsView);
    if (wavebox.isMobile()) {
      return wavebox.appController.panels.focusMain();
    }
  },
  login: function() {
    var view,
      _this = this;
    wavebox.apiClient.logOut();
    wavebox.apiClient.SESSION_ID = null;
    view = new LoginView({
      success: function() {
        wavebox.router.navigate("/home");
        return view.$el.hide();
      },
      error: function() {
        return console.log("login failed");
      }
    });
    return view.render();
  },
  home: function() {
    return this.albumArtists();
  },
  sendSelectionNotification: function(name) {
    wavebox.appController.trigger("sidebarItemSelected", name);
    return setTimeout(function() {
      wavebox.appController.trigger("sidebarItemSelected", name);
    }, 1000);
  }
});

},{"./loginView":11,"./views/albums/albumsview":33,"./views/artist/artistview":35,"./views/artistAlbum/albumlistingview":36,"./views/artists/artistsview":37,"./views/folder/folderview":41,"./views/genresView":43,"./views/playlists/playlistListingView":50,"./views/settingsView":60}],25:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var ApiClient;

ApiClient = (function() {
  function ApiClient() {
    this.API_ADDRESS = '/api';
    this.SESSION_ID = localStorage.getItem("waveBoxSessionKey");
    console.log(this.SESSION_ID);
    this.itemCache = [];
  }

  ApiClient.prototype.cacheItem = function(item) {
    return this.itemCache[parseInt(item.itemId, 10)] = item;
  };

  ApiClient.prototype.getCachedItem = function(itemId) {
    return this.itemCache[parseInt(itemId, 10)];
  };

  ApiClient.prototype.logOut = function(callback) {
    var _this = this;
    $.ajax({
      url: "" + this.API_ADDRESS + "/logout",
      success: function(data) {
        if (data.error == null) {
          if (callback != null) {
            return callback(true);
          }
        } else {
          if (callback != null) {
            return callback(false, data.error);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("logOut failed with error code: " + (JSON.stringify(XHR)));
        if (callback != null) {
          return callback(false);
        }
      },
      async: true,
      type: 'POST'
    });
    this.SESSION_ID = null;
    return localStorage.clear();
  };

  ApiClient.prototype.authenticate = function(username, password, callback) {
    var _this = this;
    return $.ajax({
      url: "" + this.API_ADDRESS + "/login",
      data: "u=" + username + "&p=" + password,
      success: function(data) {
        if (data.error == null) {
          _this.SESSION_ID = data.sessionId;
          localStorage.setItem("waveBoxSessionKey", _this.SESSION_ID);
          if (callback != null) {
            return callback(true);
          }
        } else {
          if (callback != null) {
            return callback(false, data.error);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("authenticate failed with error code: " + (JSON.stringify(XHR)));
        if (callback != null) {
          return callback(false);
        }
      },
      async: true,
      type: 'POST'
    });
  };

  ApiClient.prototype.clientIsAuthenticated = function(callback) {
    if (this.SESSION_ID != null) {
      console.log("Verifying sessionId");
      return $.ajax({
        url: "" + this.API_ADDRESS + "/status",
        success: function(data) {
          if (data.error != null) {
            console.log("sessionId not valid, error: " + data.error);
            if (callback != null) {
              return callback(false, data.error);
            }
          } else {
            console.log("sessionId is valid");
            if (callback != null) {
              return callback(true);
            }
          }
        },
        error: function(XHR, status, error) {
          console.log("error checking session id: " + status);
          if (callback != null) {
            return callback(false);
          }
        },
        async: true,
        type: "POST"
      });
    } else {
      if (callback != null) {
        return callback(false);
      }
    }
  };

  ApiClient.prototype.createPlaylist = function(name, callback) {
    return $.ajax({
      url: "" + this.API_ADDRESS + "/playlists",
      data: "action=create&name=" + (encodeURIComponent(name)),
      success: function(data) {
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          if (callback != null) {
            return callback(true);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting playlist list: " + status);
        return callback(false, error);
      }
    });
  };

  ApiClient.prototype.addToPlaylist = function(playlistId, itemIds, callback) {
    var itemIdString;
    itemIdString = "";
    if (typeof itemIds === "Array") {
      _.each(itemIds, function(itemId, index) {
        if (index !== 0) {
          itemIdString += ",";
        }
        return itemIdString += itemId;
      });
    } else {
      itemIdString = itemIds;
    }
    return $.ajax({
      url: "" + this.API_ADDRESS + "/playlists/" + playlistId,
      data: "action=add&itemIds=" + itemIdString,
      success: function(data) {
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          if (callback != null) {
            return callback(true, data.playlists);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting playlist list: " + status);
        return callback(false, error);
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.getPlaylistList = function(callback) {
    return $.ajax({
      url: "" + this.API_ADDRESS + "/playlists",
      success: function(data) {
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          if (callback != null) {
            return callback(true, data.playlists);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting playlist list: " + status);
        return callback(false, error);
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.getPlaylist = function(playlistId, callback) {
    if (playlistId == null) {
      return;
    }
    return $.ajax({
      url: "" + this.API_ADDRESS + "/playlists/" + playlistId,
      success: function(data) {
        console.log("dunnit");
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          if (callback != null) {
            return callback(true, data);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting playlist: " + status);
        return callback(false, error);
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.getArtistList = function(callback) {
    return $.ajax({
      url: "" + this.API_ADDRESS + "/artists",
      success: function(data) {
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          if (callback != null) {
            return callback(true, data.artists);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting artist list: " + status);
        return callback(false, error);
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.getArtist = function(artistId, retrieveSongs, callback) {
    if (artistId == null) {
      return;
    }
    return $.ajax({
      url: "" + this.API_ADDRESS + "/artists/" + artistId,
      data: "includeSongs=" + retrieveSongs,
      success: function(data) {
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          if (callback != null) {
            return callback(true, data);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting artist: " + status);
        return callback(false, error);
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.getAlbumArtist = function(albumArtistId, retrieveSongs, callback) {
    if (albumArtistId == null) {
      return;
    }
    return $.ajax({
      url: "" + this.API_ADDRESS + "/albumartists/" + albumArtistId,
      data: "includeSongs=" + retrieveSongs,
      success: function(data) {
        console.log("Retrieved album artist: " + albumArtistId);
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          if (callback != null) {
            return callback(true, data);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting albumArtist: " + status);
        return callback(false, error);
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.getAlbumArtistList = function(callback) {
    return $.ajax({
      url: "" + this.API_ADDRESS + "/albumartists",
      success: function(data) {
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          if (callback != null) {
            return callback(true, data.albumArtists, data.sectionPositions);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting albumArtist list: " + status);
        return callback(false, error);
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.getAlbumList = function(callback) {
    return $.ajax({
      url: "" + this.API_ADDRESS + "/albums",
      success: function(data) {
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          if (callback != null) {
            return callback(true, data.albums, data.sectionPositions);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting artist list: " + status);
        return callback(false, error);
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.getAlbum = function(albumId, callback) {
    if (albumId == null) {
      return;
    }
    return $.ajax({
      url: "" + this.API_ADDRESS + "/albums/" + albumId,
      success: function(data) {
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          if (callback != null) {
            return callback(true, data);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting album: " + status);
        return callback(false, error);
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.getArtistAlbums = function(artistId, callback) {
    if (artistId == null) {
      return;
    }
    return $.ajax({
      url: "" + this.API_ADDRESS + "/artists/" + artistId,
      success: function(data) {
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          console.log("sessionId is valid");
          if (callback != null) {
            return callback(true, data.albums, data.sectionPositions);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting artist albums list: " + status);
        if (callback != null) {
          return callback(false, error);
        }
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.getGenreList = function(callback) {
    return $.ajax({
      url: "" + this.API_ADDRESS + "/genres",
      success: function(data) {
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          if (callback != null) {
            return callback(true, data.genres, data.sectionPositions);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting genre list: " + status);
        return callback(false, error);
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.getSongList = function(id, forItemType, callback) {
    if (forItemType == null) {
      forItemType = "albums";
    }
    if (id == null) {
      return;
    }
    return $.ajax({
      url: "" + this.API_ADDRESS + "/" + forItemType + "/" + id,
      success: function(data) {
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          console.log("sessionId is valid");
          if (callback != null) {
            return callback(true, data);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting song list: " + status);
        if (callback != null) {
          return callback(false, error);
        }
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.getFolder = function(folderId, recursive, callback) {
    var data, url;
    if (recursive == null) {
      recursive = false;
    }
    url = "" + this.API_ADDRESS + "/folders";
    if (folderId != null) {
      url += "/" + folderId;
    }
    data = "";
    if (recursive) {
      data += "recursiveMedia=1";
    }
    return $.ajax({
      url: url,
      data: data,
      success: function(data) {
        if (data.error != null) {
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          console.log("sessionId is valid");
          if (callback != null) {
            return callback(true, data);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting song list: " + status);
        return callback(context, false, error);
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.getSongUrlObject = function(song, offsetSeconds) {
    var fileType, itemId, seconds, urlObj;
    if (song == null) {
      return;
    }
    urlObj = {};
    itemId = song.get("itemId");
    fileType = song.get("fileType");
    seconds = offsetSeconds != null ? offsetSeconds : 0;
    if (fileType === 2) {
      urlObj.mp3 = "/api/stream/" + itemId + "?seconds=" + seconds;
    } else {
      urlObj.mp3 = "/api/transcode/" + itemId + "?transType=MP3&transQuality=192&seconds=" + seconds;
    }
    if (fileType === 4) {
      urlObj.oga = "/api/stream/" + itemId + "?seconds=" + seconds;
    } else {
      urlObj.oga = "/api/transcode/" + itemId + "?transType=OGG&transQuality=192&seconds=" + seconds;
    }
    return urlObj;
  };

  ApiClient.prototype.getArtUrl = function(artId, size) {
    var aSize;
    if (size != null) {
      if (window.devicePixelRatio != null) {
        size *= window.devicePixelRatio;
      }
      aSize = "?size=" + size;
    } else {
      aSize = "";
    }
    return "" + this.API_ADDRESS + "/art/" + artId + aSize;
  };

  ApiClient.prototype.getArtistArtUrl = function(musicBrainzId, preview) {
    var url;
    if (preview == null) {
      preview = false;
    }
    url = "http://herpderp.me:8000?action=art&type=artist&id=" + musicBrainzId;
    if (preview) {
      url += "&preview=true";
    }
    return url;
  };

  ApiClient.prototype.getFanArtThumbUrl = function(itemId, size) {
    return "" + this.API_ADDRESS + "/fanartthumb?musicBrainzId=" + itemId;
  };

  ApiClient.prototype.lastfmSetNowPlaying = function(song, callback) {
    return $.ajax({
      url: "" + this.API_ADDRESS + "/scrobble/" + song.itemId,
      data: "action=NOWPLAYING",
      success: function(data) {
        if (data.error != null) {
          if (data.error === "LFMNotAuthenticated") {
            window.open(data.authUrl);
          }
          if (callback != null) {
            return callback(false, data.error);
          }
        } else {
          console.log("Successfully updated last.fm now playing");
          if (callback != null) {
            return callback(true, data);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting song list: " + status);
        if (callback != null) {
          return callback(false, error);
        }
      },
      async: true,
      type: "POST"
    });
  };

  ApiClient.prototype.lastfmScrobbleTrack = function(song, callback) {
    var timestamp;
    timestamp = new Date().getTime() / 1000;
    return $.ajax({
      url: "" + this.API_ADDRESS + "/scrobble",
      data: "event=" + song.itemId + "," + timestamp + "&action=SUBMIT",
      success: function(data) {
        if (data.error != null) {
          if (data.error === "LFMNotAuthenticated") {
            window.open(data.authUrl);
            if (callback != null) {
              return callback(context, false, data.error);
            }
          }
        } else {
          console.log("Scrobble successful");
          if (callback != null) {
            return callback(true, data);
          }
        }
      },
      error: function(XHR, status, error) {
        console.log("error getting song list: " + status);
        if (callback != null) {
          return callback(false, error);
        }
      },
      async: true,
      type: "POST"
    });
  };

  return ApiClient;

})();

module.exports = ApiClient;

},{}],26:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var PlayQueue;

PlayQueue = require('../models/playqueue');

module.exports = Backbone.Model.extend({
  initialize: function() {
    var _this = this;
    this.muted = false;
    this.playQueue = new PlayQueue;
    this.elapsed = 0;
    this.duration = 0;
    this.downloadProgress = 1;
    this.preferredCodec = "mp3";
    this.jPlayer = $("#jPlayer");
    this.createJPlayerInstanceWithSupplyString("mp3, oga");
    this.playQueue.listenTo(this, "timeUpdate", this.playQueue.timeUpdate);
    if (localStorage.getItem("wbPlayState") === "true") {
      return setTimeout((function() {
        var nowPlayingIndex;
        nowPlayingIndex = _this.playQueue.get("nowPlayingIndex");
        _this.playAt(nowPlayingIndex, parseFloat(localStorage.getItem("wbElapsed")));
      }), 1000);
    }
  },
  playing: function() {
    return !this.jPlayer.data().jPlayer.status.paused;
  },
  next: function() {
    var index;
    index = this.playQueue.get("nowPlayingIndex") + 1;
    if (index > this.playQueue.tracks.length - 1) {
      if (this.playQueue.get("repeat") === "all") {
        index = 0;
      } else {
        index = null;
      }
    }
    if (this.playQueue.get("repeat") === "one") {
      index = this.playQueue.get("nowPlayingIndex");
    }
    return this.playAt(index);
  },
  previous: function() {
    var index;
    index = this.playQueue.get("nowPlayingIndex") - 1;
    return this.playAt(index);
  },
  playAt: function(index, secondsOffset) {
    var song;
    if (index === null) {
      this.stop();
      return;
    }
    this.playQueue.set("nowPlayingIndex", index);
    song = this.playQueue.tracks.at(index);
    if (song != null) {
      return this.setPlayerSong(song, true, secondsOffset);
    }
  },
  playPause: function() {
    console.log("playPause triggered " + (this.playing()));
    if (this.playing()) {
      this.jPlayer.jPlayer("pause");
    } else {
      this.jPlayer.jPlayer("play");
    }
    return this.playQueue.localSavePlayState();
  },
  stop: function() {
    return this.jPlayer.jPlayer("stop");
  },
  seek: function(percent) {
    var secondsOffset, seekable;
    seekable = this.jPlayer.data().jPlayer.status.seekPercent;
    if (percent > seekable) {
      secondsOffset = this.playQueue.currentSong().get("duration") * (percent / 100);
      return this.playAt(this.playQueue.get("nowPlayingIndex"), secondsOffset);
    } else {
      this.jPlayer.jPlayer("playHead", percent);
      return this.playQueue.localSavePlayState(percent);
    }
  },
  volume: function(newLevel) {
    if (newLevel == null) {
      return this.jPlayer.jPlayer("option", "volume");
    } else {
      return this.jPlayer.jPlayer("volume", newLevel);
    }
  },
  setPlayerSong: function(song, shouldPlay, secondsOffset) {
    var incomingCodec, setJplayerMedia, supplyString,
      _this = this;
    if (secondsOffset == null) {
      secondsOffset = null;
    }
    if (song === null) {
      this.jPlayer.jPlayer("stop");
      this.trigger("newSong");
      return;
    }
    this.secondsOffset = secondsOffset != null ? secondsOffset : 0;
    incomingCodec = this.preferredFormatForSong(song);
    console.log("New song type: " + incomingCodec);
    if (incomingCodec !== "INCOMPATIBLE") {
      setJplayerMedia = function() {
        var urlObject;
        urlObject = wavebox.apiClient.getSongUrlObject(song, secondsOffset);
        _this.jPlayer.jPlayer("setMedia", urlObject);
        if (shouldPlay) {
          return _this.jPlayer.jPlayer("play");
        }
      };
      if (this.preferredCodec !== incomingCodec) {
        console.log("Destroying jPlayer");
        this.jPlayer.jPlayer("destroy");
        this.preferredCodec = incomingCodec;
        supplyString = incomingCodec === "mp3" ? "mp3, oga" : "oga, mp3";
        this.createJPlayerInstanceWithSupplyString(supplyString, setJplayerMedia);
      } else {
        setJplayerMedia();
      }
      return this.trigger("newSong");
    } else {
      console.log("unable to play\n " + song);
      return this.next();
    }
  },
  createJPlayerInstanceWithSupplyString: function(supplyString, callback) {
    var that;
    that = this;
    return this.jPlayer.jPlayer({
      error: function(e) {},
      warning: function(e) {},
      ready: function(e) {
        if (callback != null) {
          return callback();
        }
      },
      ended: function(e) {
        that.next();
        return that.trigger("songEnded");
      },
      play: function() {
        that.trigger("play");
        return that.trigger("playPause");
      },
      pause: function() {
        that.trigger("pause");
        return that.trigger("playPause");
      },
      loadstart: function(e) {},
      suspend: function(e) {},
      abort: function(e) {},
      emptied: function(e) {},
      stalled: function(e) {},
      progress: function(e) {
        that.set("downloadProgress", e.jPlayer.status.seekPercent / 100);
        return that.trigger("downloadUpdate");
      },
      timeupdate: function(e) {
        that.set("elapsed", e.jPlayer.status.currentTime + that.secondsOffset);
        that.set("duration", e.jPlayer.status.duration);
        return that.trigger("timeUpdate");
      },
      volumechange: function(e) {
        that.muted = e.jPlayer.options.muted;
        return that.trigger("volumeChange");
      },
      swfPath: "/swf/",
      supplied: supplyString,
      solution: "html, flash"
    });
  },
  preferredFormatForSong: function(song) {
    switch (song.get("fileType")) {
      case 1:
        return "oga";
      case 2:
        return "mp3";
      case 3:
        return "oga";
      case 4:
        return "oga";
      case 5:
        return "oga";
      case 6:
        return "oga";
      case 7:
        return "oga";
      case 8:
        return "oga";
      case 9:
        return "oga";
      case 10:
        return "oga";
      case 11:
        return "INCOMPATIBLE";
      case 12:
        return "INCOMPATIBLE";
      case 2147483647:
        return "INCOMPATIBLE";
      default:
        return "INCOMPATIBLE";
    }
  }
});

},{"../models/playqueue":19}],27:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var DragDrop, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DragDrop = (function(_super) {
  __extends(DragDrop, _super);

  function DragDrop() {
    _ref = DragDrop.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  DragDrop.prototype.initialize = function() {
    return this.dropObject = null;
  };

  DragDrop.prototype.mediaDragStart = function(dropObject) {
    this.dropObject = dropObject;
    return this.trigger("mediaDragStart");
  };

  DragDrop.prototype.mediaDragEnd = function() {
    var dropObject;
    dropObject = null;
    return this.trigger("mediaDragEnd");
  };

  return DragDrop;

})(Backbone.Model);

module.exports = DragDrop;

},{}],28:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var KeyboardShortcuts,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

KeyboardShortcuts = (function() {
  function KeyboardShortcuts() {
    this.mapKeypress = __bind(this.mapKeypress, this);
    $(document).on("keydown", this.mapKeypress);
  }

  KeyboardShortcuts.prototype.mapKeypress = function(e) {
    if (document.activeElement.tagName !== "INPUT") {
      if (e.keyCode === 32) {
        this.spacebar();
      }
      if (e.keyCode === 37) {
        this.leftArrow();
      }
      if (e.keyCode === 38) {
        this.upArrow();
      }
      if (e.keyCode === 39) {
        this.rightArrow();
      }
      if (e.keyCode === 40) {
        this.downArrow();
      }
      if (e.keyCode === 70 && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        if (e.shiftKey) {
          return this.cmdShiftF();
        } else {
          return this.cmdF();
        }
      }
    }
  };

  KeyboardShortcuts.prototype.spacebar = function() {
    return wavebox.audioPlayer.playPause();
  };

  KeyboardShortcuts.prototype.leftArrow = function() {
    return wavebox.audioPlayer.previous();
  };

  KeyboardShortcuts.prototype.upArrow = function() {
    return wavebox.audioPlayer.volume(wavebox.audioPlayer.volume() + .1);
  };

  KeyboardShortcuts.prototype.rightArrow = function() {
    return wavebox.audioPlayer.next();
  };

  KeyboardShortcuts.prototype.downArrow = function() {
    return wavebox.audioPlayer.volume(wavebox.audioPlayer.volume() - .1);
  };

  KeyboardShortcuts.prototype.cmdShiftF = function() {
    return wavebox.appController.mainView.$el.find(".page-search-textbox").last().focus();
  };

  KeyboardShortcuts.prototype.cmdF = function() {
    return $(".server-search-input").focus();
  };

  return KeyboardShortcuts;

})();

module.exports = KeyboardShortcuts;

},{}],29:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
module.exports = (function() {
  function _Class() {}

  _Class.formattedTimeWithSeconds = function(seconds) {
    var hrs, mins, secs, stringTime;
    stringTime = "";
    hrs = Math.floor(seconds / 3600);
    mins = Math.floor((seconds - (hrs * 3600)) / 60);
    secs = Math.floor(seconds - (hrs * 3600) - (mins * 60));
    if (hrs > 0) {
      stringTime += "" + hrs + ":";
    }
    if (mins < 10 && hrs > 0) {
      stringTime += "0" + mins + ":";
    } else {
      stringTime += "" + mins + ":";
    }
    if (secs < 10) {
      stringTime += "0" + secs;
    } else {
      stringTime += secs;
    }
    return stringTime;
  };

  _Class.delay = function(millis, callback) {
    return setTimeout(callback, millis);
  };

  return _Class;

})();

},{}],30:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Utils, ViewStack;

Utils = require('./utils');

module.exports = ViewStack = (function() {
  function ViewStack(containerSelector) {
    this.views = [];
    this.resetNext = false;
    this.animateNext = true;
    this.$el = $(containerSelector);
  }

  ViewStack.prototype.push = function(newView, animate, reset) {
    var a, bury,
      _this = this;
    if (reset == null) {
      reset = false;
    }
    if (newView == null) {
      return;
    }
    if (animate == null) {
      animate = !this.animateNext ? (console.log("nope nope nope nope"), false) : wavebox.isMobile() ? true : false;
    }
    bury = this.views[this.views.length - 1];
    this.views.push(newView);
    a = Date.now();
    newView.render();
    console.log("render time: " + (Date.now() - a));
    if ((bury != null) && animate) {
      bury.$el.addClass("viewstack-animate");
      newView.$el.addClass("viewstack-animate viewstack-offscreen-right");
    }
    this.$el.append(newView.el);
    if (animate && (bury != null)) {
      Utils.delay(20, function() {
        newView.$el.addClass("viewstack-onscreen");
        return bury.$el.addClass("viewstack-offscreen-left");
      });
      Utils.delay(600, function() {
        newView.$el.removeClass("viewstack-animate viewstack-offscreen-right viewstack-onscreen");
        return bury.$el.hide();
      });
    } else if (bury != null) {
      bury.$el.hide();
    }
    if (reset || this.resetNext) {
      this.reset();
    }
    return this.animateNext = true;
  };

  ViewStack.prototype.pop = function(animate) {
    var h, next, top;
    top = this.views.pop();
    next = this.views[this.views.length - 1];
    if (animate == null) {
      animate = !this.animateNext ? false : wavebox.isMobile() ? true : false;
    }
    if (animate) {
      top.$el.addClass("viewstack-animate");
      next.$el.addClass("viewstack-animate viewstack-offscreen-left");
    }
    next.$el.show();
    if (animate) {
      Utils.delay(20, function() {
        top.$el.addClass("viewstack-offscreen-right");
        next.$el.removeClass("viewstack-offscreen-left");
        return Utils.delay(600, function() {
          return top.$el.remove();
        });
      });
    } else {
      top.$el.remove();
    }
    h = Backbone.history;
    return h.navigate(h[h.length - 2], false);
  };

  ViewStack.prototype.popToRoot = function(animate) {
    if (animate == null) {
      animate = true;
    }
  };

  ViewStack.prototype.reset = function() {
    var i, removeToHere, _i, _results;
    console.log(this.resetNext);
    this.resetNext = false;
    removeToHere = this.views.length - 1;
    console.log("resetting! " + removeToHere);
    _results = [];
    for (i = _i = 0; 0 <= removeToHere ? _i < removeToHere : _i > removeToHere; i = 0 <= removeToHere ? ++_i : --_i) {
      console.log("Removing " + i + "!");
      this.views[0].$el.remove();
      _results.push(this.views.splice(0, 1));
    }
    return _results;
  };

  ViewStack.prototype.canPop = function() {
    return this.views.length > 1;
  };

  return ViewStack;

})();

},{"./utils":29}],31:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
module.exports = Backbone.View.extend({
  tagName: "a",
  template: _.template($("#template-action-sheet-item").html()),
  events: {
    "click": function(e) {
      var action;
      e.preventDefault();
      this.trigger("clicked");
      action = this.model.get("action");
      if (action != null) {
        return action();
      }
    }
  },
  render: function() {
    var $temp, temp;
    temp = document.createElement("div");
    $temp = $(temp);
    $temp.append(this.template({
      itemTitle: this.model.get("itemTitle" || ""),
      itemClass: this.model.get("itemClass" || "")
    }));
    this.$el.attr("href", this.model.get("href") || "");
    this.$el.append($temp.children());
    return this;
  }
});

},{}],32:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var ActionSheetItem, ActionSheetItemView, ActionSheetItems;

ActionSheetItems = require("../../collections/actionSheetItems");

ActionSheetItemView = require("./actionSheetItemView");

ActionSheetItem = require("../../models/actionSheetItem");

module.exports = Backbone.View.extend({
  tagName: "ul",
  className: function() {
    if (wavebox.isMobile()) {
      return "action-sheet";
    } else {
      return "context-menu";
    }
  },
  initialize: function(options) {
    var _this = this;
    this.options = options;
    this.title = options.title;
    this.collection = new ActionSheetItems;
    return _.each(options.items, function(element, index, list) {
      return _this.collection.push(new ActionSheetItem(element));
    });
  },
  events: {
    "reset": "render"
  },
  show: function() {
    if (wavebox.isMobile()) {
      this.$el.transit({
        y: 0,
        "opacity": "1"
      }, 300, "ease-in-out");
    }
    return this;
  },
  hide: function() {
    var _this = this;
    if (wavebox.isMobile()) {
      this.$el.transit({
        y: 50 * (this.collection.length + 1),
        "opacity": "0"
      }, 300, "ease-in-out", function() {
        return _this.remove();
      });
    } else {
      this.remove();
    }
    return this;
  },
  render: function() {
    var $temp, cancel, temp,
      _this = this;
    console.log("rendering action sheet");
    temp = document.createElement("a");
    $temp = $(temp);
    this.collection.each(function(element, index, list) {
      var view;
      if (element.get("enabled")) {
        view = new ActionSheetItemView({
          model: element
        });
        _this.listenTo(view, "clicked", _this.hide);
        return $temp.append(view.render().el);
      }
    });
    cancel = new ActionSheetItemView({
      model: new ActionSheetItem({
        itemTitle: "Cancel"
      })
    });
    this.listenToOnce(cancel, "clicked", this.hide);
    $temp.append(cancel.render().el);
    this.$el.append($temp.children());
    console.log(this.options);
    if ((this.options.origin != null) && !wavebox.isMobile()) {
      this.$el.css("-webkit-transform", "translate(" + this.options.origin.x + "px, " + this.options.origin.y + "px)");
    }
    if (wavebox.isMobile()) {
      this.$el.css("-webkit-transform", "translate(0px, " + (50 * this.collection.length) + "px)");
    }
    return this;
  }
});

},{"../../collections/actionSheetItems":2,"../../models/actionSheetItem":12,"./actionSheetItemView":31}],33:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Albums, AlbumsView, CoverListView, PageView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PageView = require("../pageView");

Albums = require("../../collections/albums");

CoverListView = require("../coverList/coverListView");

AlbumsView = (function(_super) {
  __extends(AlbumsView, _super);

  function AlbumsView() {
    _ref = AlbumsView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  AlbumsView.prototype.tagName = "div";

  AlbumsView.prototype.filter = "";

  AlbumsView.prototype.initialize = function() {
    this.collection = new Albums;
    this.listenToOnce(this.collection, "reset", this.render);
    return this.collection.fetch({
      reset: true
    });
  };

  AlbumsView.prototype.events = {
    "input .page-search-textbox": function(event) {
      return this.covers.model.set("filter", $(event.target).val());
    },
    "click .DirectoryViewIcon": function(event) {
      console.log("dv click");
      return this.$el.find(".main-scrollingContent").addClass("listView");
    },
    "click .AlbumSortIcon": function(event) {
      console.log("as click");
      return this.$el.find(".main-scrollingContent").removeClass("listView");
    }
  };

  AlbumsView.prototype.render = function() {
    var $content, result;
    console.log("rendering albums");
    result = AlbumsView.__super__.render({
      leftAccessory: "sprite-menu",
      rightAccessory: "sprite-play-queue",
      pageTitle: "Albums",
      searchBarClass: ""
    });
    $content = result.find(".page-content").addClass("scroll");
    this.covers = new CoverListView({
      collection: this.collection
    });
    $content.append(this.covers.render().el);
    this.$el.empty().append(result.children());
    return this;
  };

  return AlbumsView;

})(PageView);

module.exports = AlbumsView;

},{"../../collections/albums":4,"../coverList/coverListView":39,"../pageView":49}],34:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var NavSidebarView, PlayQueueView, RightSidebarView, SidePanelController, ViewStack;

NavSidebarView = require('./navsidebarview');

RightSidebarView = require('./rightSidebar/rightsidebarview');

PlayQueueView = require('./rightSidebar/playQueue/playQueueView');

SidePanelController = require('./sidePanelController');

ViewStack = require('../utils/viewStack');

module.exports = Backbone.View.extend({
  el: "body",
  initialize: function() {
    this.panels = new SidePanelController({
      el: this.el,
      left: NavSidebarView,
      right: RightSidebarView,
      main: new ViewStack("#main")
    });
    this.toggledPanel = null;
    this.mainView = this.panels.main;
    return $(document).on("unload", function(e) {
      return e.preventDefault();
    });
  },
  events: {
    "click .sprite-menu": function(e) {
      e.preventDefault();
      return this.panels.leftToggle();
    },
    "click .sprite-play-queue": function(e) {
      e.preventDefault();
      return this.panels.rightToggle();
    },
    "click .sprite-back-arrow": function(e) {
      e.preventDefault();
      if (this.panels.main.canPop()) {
        return this.panels.main.pop();
      } else {
        return history.back(1);
      }
    },
    "dragend": "dragend"
  },
  dragend: function() {
    wavebox.dragDrop.dropObject.dragend();
    return console.log("app view touch end");
  },
  render: function() {
    return this.panels.render().el;
  }
});

},{"../utils/viewStack":30,"./navsidebarview":47,"./rightSidebar/playQueue/playQueueView":55,"./rightSidebar/rightsidebarview":56,"./sidePanelController":61}],35:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var AlbumArtist, Artist, ArtistView, CoverListView, PageView, TrackListView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PageView = require('../pageView');

Artist = require('../../models/artist');

AlbumArtist = require('../../models/albumArtist');

CoverListView = require('../coverList/coverListView');

TrackListView = require('../tracklistview');

ArtistView = (function(_super) {
  __extends(ArtistView, _super);

  function ArtistView() {
    _ref = ArtistView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ArtistView.prototype.tagName = "div";

  ArtistView.prototype.className = "scroll";

  ArtistView.prototype.template = _.template($("#template-page-artist").html());

  ArtistView.prototype.events = {
    "click .collection-actions-play-all": "playAll",
    "click .page-artist-header": "toggleHeader",
    "click .page-artist-tab-songs": "showSongs",
    "click .page-artist-tab-albums": "showAlbums",
    "click .page-artist-tab-favorites": "showFavorites",
    "click .sprite": function(e) {
      if (!this.headerEnabled) {
        return e.stopPropagation();
      }
    }
  };

  ArtistView.prototype.initialize = function(options) {
    var _this = this;
    this.contentLoaded = false;
    this.headerEnabled = true;
    this.isAlbumArtist = (options.isAlbumArtist != null) && options.isAlbumArtist;
    if (options.artistId != null) {
      options.retrieveSongs = true;
      this.artist = this.isAlbumArtist ? new AlbumArtist(options) : new Artist(options);
      this.listenToOnce(this.artist, "change", function() {
        console.log(_this.artist);
        _this.contentLoaded = true;
        return _this.render();
      });
      return this.artist.fetch();
    }
  };

  ArtistView.prototype.render = function() {
    this.artistName = this.artist.get(this.isAlbumArtist ? "albumArtistName" : "artistName");
    if (this.contentLoaded) {
      this.$el.append(this.template({
        artistName: this.artistName,
        counts: this.artist.get("counts")
      }));
      this.$content = this.$el.find(".page-content");
      this.$el.find(".page-artist-header").css("background-image", "url(" + (wavebox.apiClient.getArtistArtUrl(this.artist.get("musicBrainzId"))) + ")");
      this.showSongs();
    }
    return this;
  };

  ArtistView.prototype.toggleHeader = function(e) {
    var $header, opacity;
    if ($(e.target).hasClass("sprite")) {
      return;
    }
    $header = this.$el.find(".page-artist-header-overlay");
    opacity = this.headerEnabled ? 0 : 1;
    this.headerEnabled = !this.headerEnabled;
    return $header.css("opacity", opacity);
  };

  ArtistView.prototype.showSongs = function() {
    var view;
    console.log("songs");
    view = new TrackListView({
      collection: this.artist.get("tracks")
    });
    this.$content.empty().append(view.render().el);
    view.switchSortKey("Title");
    return false;
  };

  ArtistView.prototype.showAlbums = function() {
    var view;
    console.log("albums");
    view = new CoverListView({
      collection: this.artist.get("albums")
    });
    this.$content.empty().append(view.render().el);
    return false;
  };

  ArtistView.prototype.showFavorites = function() {
    console.log("favorites");
    return false;
  };

  ArtistView.prototype.playAll = function(e) {
    e.preventDefault();
    this.listenToOnce(this.artist, "change", function() {
      console.log("got tracks");
      this.artist.get("tracks").each(function(track) {
        return wavebox.audioPlayer.playQueue.add(track);
      });
      if (this.artist.get("tracks").size() === wavebox.audioPlayer.playQueue.tracks.size()) {
        return wavebox.audioPlayer.playAt(0);
      }
    });
    return this.artist.retrieveSongs();
  };

  return ArtistView;

})(PageView);

module.exports = ArtistView;

},{"../../models/albumArtist":14,"../../models/artist":15,"../coverList/coverListView":39,"../pageView":49,"../tracklistview":63}],36:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Album, AlbumView, PageView, TrackList, TrackListView, Utils, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PageView = require('../pageView');

TrackListView = require('../tracklistview');

TrackList = require('../../collections/tracklist');

Album = require('../../models/album');

Utils = require('../../utils/utils');

AlbumView = (function(_super) {
  __extends(AlbumView, _super);

  function AlbumView() {
    _ref = AlbumView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  AlbumView.prototype.tagName = "div";

  AlbumView.prototype.className = "mediaPage";

  AlbumView.prototype.template = _.template($("#template-page-album").html());

  AlbumView.prototype.initialize = function(options) {
    if (options.albumId != null) {
      this.contentLoaded = false;
      this.album = new Album({
        albumId: options.albumId
      });
      this.listenToOnce(this.album, "change", function() {
        this.contentLoaded = true;
        return this.render();
      });
      return this.album.fetch();
    }
  };

  AlbumView.prototype.events = {
    "click .collection-actions-play-all": "playAll"
  };

  AlbumView.prototype.render = function() {
    var $content, $page, $temp, albumTitle, artId, artUrl, duration, totalDuration, trackCount, trackList, tracks;
    $temp = $("<div>");
    if (this.contentLoaded) {
      artId = this.album.get("artId");
      if (artId != null) {
        artUrl = wavebox.apiClient.getArtUrl(this.album.get("artId"), 300);
      }
      albumTitle = this.album.get("albumName");
      duration = 0;
      tracks = this.album.get("tracks");
      tracks.each(function(track, index, list) {
        return duration += track.get("duration");
      });
      totalDuration = Utils.formattedTimeWithSeconds(duration);
      trackCount = tracks.size();
    }
    $page = AlbumView.__super__.render({
      leftAccessory: "sprite-back-arrow",
      rightAccessory: "sprite-play-queue",
      artUrl: artUrl || "",
      pageTitle: albumTitle || "",
      totalDuration: totalDuration || "",
      trackCount: trackCount || ""
    });
    $temp.append($page.children());
    document.title = "Wave - " + (albumTitle || "");
    $content = $temp.find(".page-content");
    if (this.contentLoaded) {
      trackList = new TrackListView({
        collection: tracks,
        artId: this.album.get("artId")
      });
      $content.append(this.template({
        artUrl: artUrl || "",
        totalDuration: Utils.formattedTimeWithSeconds(duration),
        trackCount: tracks.size(),
        artistName: this.album.get("artistName") || "",
        albumName: albumTitle || "",
        releaseYear: this.album.get("releaseYear") || ""
      }));
      $content.find(".page-album-cover").css("background-image", "url(" + artUrl + ")");
      console.log(this.album);
      $content.append(trackList.render().el);
      $content.addClass("scroll");
      if (wavebox.isMobile()) {
        trackList.$el.css("top", "" + screen.width + "px");
      }
    } else {
      $content.append("Loading");
    }
    this.$el.empty().append($temp.children());
    this.$el.find(".DirectoryViewIcon, .AlbumSortIcon").remove();
    return this;
  };

  AlbumView.prototype.playAll = function(e) {
    e.preventDefault();
    this.album.get("tracks").each(function(track) {
      return wavebox.audioPlayer.playQueue.add(track);
    });
    if (this.album.get("tracks").size() === wavebox.audioPlayer.playQueue.tracks.size()) {
      return wavebox.audioPlayer.playAt(0);
    }
  };

  return AlbumView;

})(PageView);

module.exports = AlbumView;

},{"../../collections/tracklist":10,"../../models/album":13,"../../utils/utils":29,"../pageView":49,"../tracklistview":63}],37:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var AlbumArtists, Artists, ArtistsView, CoverListView, Genre, PageView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PageView = require("../pageView");

Artists = require("../../collections/artists");

AlbumArtists = require("../../collections/albumArtists");

CoverListView = require("../coverList/coverListView");

Genre = require('../../models/genre');

ArtistsView = (function(_super) {
  __extends(ArtistsView, _super);

  function ArtistsView() {
    _ref = ArtistsView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ArtistsView.prototype.tagName = "div";

  ArtistsView.prototype.filter = "";

  ArtistsView.prototype.initialize = function(options) {
    var _this = this;
    if ((options != null) && (options.genreId != null)) {
      this.collection = new Genre(null, {
        genreId: options.genreId
      });
    } else if ((options != null) && (options.isAlbumArtist != null) && options.isAlbumArtist) {
      this.collection = new AlbumArtists;
    } else {
      this.collection = new Artists;
    }
    console.log(this.collection);
    this.collection.fetch({
      reset: true
    });
    this.listenToOnce(this.collection, "sync", function() {
      _this.fetched = true;
      return _this.render();
    });
    return this.el.addEventListener("input", this.search, true);
  };

  ArtistsView.prototype.events = {
    "click .DirectoryViewIcon": function(event) {
      return this.$el.find(".main-scrollingContent").addClass("listView");
    },
    "click .AlbumSortIcon": function(event) {
      return this.$el.find(".main-scrollingContent").removeClass("listView");
    },
    "input .page-search-textbox": function(event) {
      return this.covers.model.set("filter", $(event.target).val());
    }
  };

  ArtistsView.prototype.render = function() {
    var $content, artists, result;
    result = ArtistsView.__super__.render({
      leftAccessory: "sprite-menu",
      rightAccessory: "sprite-play-queue",
      pageTitle: "Artists",
      search: true
    });
    $content = result.find(".page-content").addClass("scroll");
    if (this.fetched) {
      artists = this.collection.constructor.name === "Genre" ? this.collection.get("artists") : this.collection;
      console.log(this.collection);
      this.covers = new CoverListView({
        collection: artists
      });
      $content.append(this.covers.render().el);
    }
    this.$el.empty().append(result.children());
    return this;
  };

  return ArtistsView;

})(PageView);

module.exports = ArtistsView;

},{"../../collections/albumArtists":3,"../../collections/artists":5,"../../models/genre":17,"../coverList/coverListView":39,"../pageView":49}],38:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var CoverListItemView, Utils, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Utils = require("../../utils/utils");

CoverListItemView = (function(_super) {
  __extends(CoverListItemView, _super);

  function CoverListItemView() {
    this.artLoaded = __bind(this.artLoaded, this);
    this.preloadArt = __bind(this.preloadArt, this);
    _ref = CoverListItemView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  CoverListItemView.prototype.tagName = 'div';

  CoverListItemView.prototype.className = 'list-cover-item';

  CoverListItemView.prototype.template = _.template($("#template-cover-item").html());

  CoverListItemView.prototype.attributes = {
    "draggable": true
  };

  CoverListItemView.prototype.initialize = function(options) {
    if (options != null) {
      this.fields = options.model.coverViewFields();
    }
    return this.$el.data("backbone-view", this);
  };

  CoverListItemView.prototype.events = {
    "click": function() {
      console.log(this.model);
      return wavebox.router.navigate(this.model.pageUrl(), {
        trigger: true
      });
    },
    "dragstart": function(e) {
      return wavebox.dragDrop.mediaDragStart(this.model);
    },
    "dragend": function(e) {
      return wavebox.dragDrop.mediaDragEnd();
    }
  };

  CoverListItemView.prototype.render = function() {
    this.$el.append(this.template({
      title: _.escape(this.fields.title),
      artist: _.escape(this.fields.artist)
    }));
    return this;
  };

  CoverListItemView.prototype.preloadArt = function() {
    if (this.art != null) {
      return;
    }
    if (this.fields.artId != null) {
      this.art = new Image;
      this.art.onload = this.artLoaded;
      this.art.src = wavebox.apiClient.getArtUrl(this.fields.artId);
      console.log("Preloading art for art id " + this.fields.artId);
    } else if (this.fields.musicBrainzId != null) {
      this.art = new Image;
      this.art.onload = this.artLoaded;
      this.art.src = wavebox.apiClient.getFanArtThumbUrl(this.fields.musicBrainzId);
      console.log("Preloading art for musicBrainzId " + this.fields.musicBrainzId);
    }
  };

  CoverListItemView.prototype.artLoaded = function() {
    this.$el.children().first().css("background-image", "url(" + this.art.src + ")");
  };

  return CoverListItemView;

})(Backbone.View);

module.exports = CoverListItemView;

},{"../../utils/utils":29}],39:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var CoverListItemView, CoverListView, InfiniteScroll, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CoverListItemView = require("./coverListItemView");

InfiniteScroll = require('../infiniteScroll');

CoverListView = (function(_super) {
  __extends(CoverListView, _super);

  function CoverListView() {
    this.clickedIndex = __bind(this.clickedIndex, this);
    this.createInfinityView = __bind(this.createInfinityView, this);
    this.loadCoversMobile = __bind(this.loadCoversMobile, this);
    this.scrolled = __bind(this.scrolled, this);
    _ref = CoverListView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  CoverListView.prototype.tagName = "div";

  CoverListView.prototype.initialize = function(options) {
    this.model = new Backbone.Model;
    this.model.set("filter", "");
    return this.listenTo(this.model, "change", this.filter);
  };

  CoverListView.prototype.className = "list-cover";

  CoverListView.prototype.render = function() {
    var filter,
      _this = this;
    filter = this.model.get("filter").toLowerCase();
    infinity.config.PAGE_TO_SCREEN_RATIO = 3;
    infinity.config.SCROLL_THROTTLE = 350;
    setTimeout(function() {
      var $indexItem, $sideIndex, i, index, rows, _i, _len, _ref1;
      if (_this.collection.positions != null) {
        $sideIndex = $('<div>');
        $sideIndex.addClass("list-index");
        i = 0;
        _ref1 = _this.collection.positions;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          index = _ref1[_i];
          $indexItem = $("<p>" + index.Key + "</p>");
          $indexItem.data("position", i);
          $indexItem.data("index", index.Value);
          $indexItem.data("key", index.Key);
          $indexItem.click(_this.clickedIndex);
          $sideIndex.append($indexItem);
          i++;
        }
        _this.$el.parent().parent().append($sideIndex);
      }
      _this.createInfinityView();
      if (wavebox.isMobile() || (_this.collection.positions == null)) {
        _this.amountToLoad = 50;
        return _this.loadCoversMobile(0, _this.amountToLoad);
      } else {
        _this.sectionKeyIndex = 0;
        _this.sectionCount = 0;
        _this.currentPair = _this.collection.positions[_this.sectionKeyIndex];
        _this.currentPair.scrollTop = 0;
        _this.createContainer(_this.currentPair.Key);
        _this.count = 0;
        _this.totalHeight = 0;
        _this.collection.each(function(item) {
          var height, rows, view;
          if (item.coverViewFields().title.toLowerCase().indexOf(filter) > -1) {
            if (item.coverViewFields().title.charAt(0).toUpperCase() !== _this.currentPair.Key) {
              rows = Math.ceil(_this.count / 5);
              if (rows === 0) {
                rows = 1;
              }
              height = rows * 148 + 35;
              _this.container.height(height);
              console.log("key: " + _this.currentPair.Key + "  height: " + height);
              _this.infinityView.append(_this.container);
              if (!isNaN(height)) {
                _this.totalHeight = _this.totalHeight + height + 2;
              }
              _this.count = 0;
              _this.sectionKeyIndex++;
              _this.currentPair = _this.collection.positions[_this.sectionKeyIndex];
              _this.currentPair.scrollTop = _this.totalHeight;
              _this.createContainer(_this.currentPair.Key);
            }
            view = new CoverListItemView({
              model: item
            });
            view.render();
            _this.container.append(view.el);
            return _this.count++;
          }
        });
        rows = Math.ceil(_this.count / 5);
        if (rows === 0) {
          rows = 1;
        }
        _this.container.height(rows * 148 + 35);
        return _this.infinityView.append(_this.container);
      }
    }, 0);
    return this;
  };

  CoverListView.prototype.scrolled = function(e) {
    if ((this.preventScrollEvent != null) && this.preventScrollEvent === true) {
      /*setTimeout =>
      				@preventScrollEvent = false
      				return
      			, 1000
      */

      this.preventScrollEvent = false;
      return;
    }
    if (this.initialLoadScrollHeight != null) {
      console.log("scrollTop + innerHeight = " + (this.infinityDiv.scrollTop() + this.infinityDiv.innerHeight()) + " scrollHeight = " + (this.infinityDiv[0].scrollHeight - (this.initialLoadScrollHeight / 2)));
      console.log("scrollTop: " + this.infinityDiv.scrollTop());
      if (this.infinityDiv.scrollTop() <= this.initialLoadScrollHeight * .25 && this.firstLoadedIndex > 0) {
        return this.loadCoversMobile(this.firstLoadedIndex, this.amountToLoad, true, this.milliToWait);
      } else if (this.infinityDiv.scrollTop() + this.infinityDiv.innerHeight() >= this.infinityDiv[0].scrollHeight - (this.initialLoadScrollHeight * .25)) {
        console.log("half way!");
        return this.loadCoversMobile(this.lastLoadedIndex, this.amountToLoad, false, this.milliToWait);
      }
    }
  };

  CoverListView.prototype.loadCoversMobile = function(index, amount, prepend, delay) {
    var addedHeight, byAmount, end, filter, item, length, max, newRows, remaining, scrollTop, start, view, x, _i,
      _this = this;
    if (amount == null) {
      amount = 50;
    }
    console.log("loadCoversMobile called, index = " + index + " @collection.length = " + this.collection.length);
    length = this.collection.length;
    if ((prepend && index < 0) || (!prepend && index >= length)) {
      return;
    }
    if (prepend) {
      byAmount = -1;
      start = index - 1;
      end = start - amount;
      if (end < -1) {
        end = -1;
      }
    } else {
      remaining = length - index;
      if (remaining > amount) {
        max = amount + index;
      } else {
        max = remaining + index;
      }
      byAmount = 1;
      start = index;
      end = max;
    }
    console.log("loadCoversMobile processing from " + start + " to " + end);
    filter = this.model.get("filter").toLowerCase();
    for (x = _i = start; byAmount > 0 ? _i < end : _i > end; x = _i += byAmount) {
      item = this.collection.at(x);
      if (item.coverViewFields().title.toLowerCase().indexOf(filter) > -1) {
        view = new CoverListItemView({
          model: item
        });
        view.render();
        if (prepend) {
          this.infinityView.prepend(view.$el);
        } else {
          this.infinityView.append(view.$el);
        }
      }
    }
    scrollTop = this.infinityDiv.scrollTop();
    newRows = start - end;
    addedHeight = newRows * 60;
    this.preventScrollEvent = true;
    this.infinityDiv.scrollTop(scrollTop + addedHeight);
    if (prepend) {
      this.firstLoadedIndex = end;
    } else {
      this.lastLoadedIndex = end;
      if (this.firstLoadedIndex == null) {
        this.firstLoadedIndex = start;
        if (index !== 0) {
          this.preventScrollEvent = true;
          this.infinityDiv.scrollTop(this.infinityDiv[0].scrollHeight / 2);
        }
      }
    }
    if (this.initialLoadScrollHeight == null) {
      this.initialLoadScrollHeight = this.infinityDiv[0].scrollHeight;
    }
    if ((delay != null) && delay === true) {
      return setTimeout(function() {
        return _this.loadCoversMobile(max, amount, prepend, delay);
      }, delay);
    }
  };

  CoverListView.prototype.createInfinityView = function() {
    if (this.infinityView != null) {
      this.infinityView.remove();
      this.firstLoadedIndex = null;
      this.lastLoadedIndex = null;
    }
    this.infinityDiv = this.$el.parent();
    this.infinityDiv.scroll(this.scrolled);
    return this.infinityView = new infinity.ListView(this.infinityDiv, {
      useElementScroll: true,
      lazy: function($element) {
        var backboneView, child, children, _i, _len, _results;
        children = wavebox.isMobile() || ((this.collection != null) && !this.collection.positions) ? $element.children : $element.children[0].children;
        _results = [];
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          backboneView = $(child).data("backbone-view");
          if (backboneView != null) {
            _results.push(backboneView.preloadArt());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    });
  };

  CoverListView.prototype.createContainer = function(letter) {
    this.container = $(document.createElement('div'));
    this.container.width(768);
    return this.container.append("<div style='height: 15px; margin: 10px'>" + letter + "</div>");
  };

  CoverListView.prototype.filter = function() {
    clearTimeout(this.filterTimeout);
    return this.filterTimeout = setTimeout(this.render.bind(this), 100);
  };

  CoverListView.prototype.clickedIndex = function(e) {
    var position, scrollTop,
      _this = this;
    if (wavebox.isMobile()) {
      wavebox.appController.$el.spin();
      return setTimeout(function() {
        var coverIndex, index;
        _this.createInfinityView();
        index = $(e.target).data("index");
        coverIndex = index + (_this.amountToLoad / 2);
        _this.loadCoversMobile(coverIndex, _this.amountToLoad, false);
        return wavebox.appController.$el.spin(false);
      }, 250);
    } else {
      position = $(e.target).data("position");
      scrollTop = this.collection.positions[position].scrollTop;
      return this.infinityDiv.scrollTop(scrollTop);
    }
  };

  return CoverListView;

})(Backbone.View);

module.exports = CoverListView;

},{"../infiniteScroll":44,"./coverListItemView":38}],40:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var CreatePlaylistSidebarItemView, NavSidebarItemView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

NavSidebarItemView = './navsidebaritemview';

CreatePlaylistSidebarItemView = (function(_super) {
  __extends(CreatePlaylistSidebarItemView, _super);

  function CreatePlaylistSidebarItemView() {
    _ref = CreatePlaylistSidebarItemView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  CreatePlaylistSidebarItemView.prototype.tagName = 'li';

  CreatePlaylistSidebarItemView.prototype.className = 'SidebarIcons';

  CreatePlaylistSidebarItemView.prototype.template = _.template($("#template-create-playlist-sidebar-item").html());

  CreatePlaylistSidebarItemView.prototype.events = {
    "click": "input",
    "keydown": "keydown",
    "dragover": function(e) {
      return false;
    }
  };

  CreatePlaylistSidebarItemView.prototype.initialize = function() {
    return this.model = new Backbone.Model;
  };

  CreatePlaylistSidebarItemView.prototype.render = function() {
    this.$el.empty().append(this.template());
    this.delegateEvents();
    return this;
  };

  CreatePlaylistSidebarItemView.prototype.keydown = function(e) {
    var _this = this;
    if (e.keyCode === 13) {
      return wavebox.apiClient.createPlaylist($(e.target).val(), function(success, error) {
        if (error != null) {
          return console.log(error);
        } else {
          return _this.model.trigger("changed");
        }
      });
    }
  };

  return CreatePlaylistSidebarItemView;

})(Backbone.View);

module.exports = CreatePlaylistSidebarItemView;

},{}],41:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var CoverListView, Folder, FolderView, PageView, SubFolderView, TrackListView, Utils, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PageView = require('../pageView');

SubFolderView = require('./subfolderview');

TrackListView = require('../tracklistview');

Folder = require('../../models/folder');

CoverListView = require('../coverList/coverListView');

Utils = require('../../utils/utils');

FolderView = (function(_super) {
  __extends(FolderView, _super);

  function FolderView() {
    _ref = FolderView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  FolderView.prototype.tagName = "div";

  FolderView.prototype.className = "mediaPage";

  FolderView.prototype.events = {
    "click .collection-actions-play-all": "playAll",
    "input .page-search-textbox": "search"
  };

  FolderView.prototype.template = _.template($("#template-page-folder").html());

  FolderView.prototype.search = function() {
    return this.covers.model.set("filter", $(event.target).val());
  };

  FolderView.prototype.initialize = function(options) {
    var _this = this;
    this.contentLoaded = false;
    this.folder = (options != null) && (options.folderId != null) ? (console.log(options.folderId), new Folder({
      folderId: options.folderId
    })) : new Folder;
    this.subFolder = (options != null) && (options.isSubFolder != null) ? (console.log(options.isSubFolder), options.isSubFolder) : false;
    this.listenToOnce(this.folder, "change", function() {
      _this.contentLoaded = true;
      return _this.render();
    });
    return this.folder.fetch();
  };

  FolderView.prototype.render = function() {
    var $content, $page, artId, duration, folders, header, neededWidth, title, tracks, view;
    title = this.folder != null ? (this.folder.get("folderName") != null ? this.folder.get("folderName") : "Folders") : "Folders";
    folders = this.folder.get("folders") || {};
    tracks = this.folder.get("tracks") || {};
    $page = FolderView.__super__.render({
      leftAccessory: this.subFolder ? "sprite-back-arrow" : "sprite-menu",
      rightAccessory: "sprite-play-queue",
      artUrl: "",
      pageTitle: title,
      search: folders.length > 0
    });
    $content = $page.find(".page-content");
    if (this.contentLoaded) {
      duration = 0;
      tracks.each(function(track) {
        return duration += track.get("duration");
      });
      duration = duration > 0 ? Utils.formattedTimeWithSeconds(duration) : null;
      if (this.subFolder) {
        header = this.template({
          folderName: this.folder.get("folderName") || "",
          folderCount: folders.size() || null,
          trackCount: tracks.size() || null,
          totalDuration: duration || ""
        });
        $content.prepend(header);
        artId = this.folder.get("artId");
        neededWidth = wavebox.isMobile() ? $(document.body).width() : 130;
        if (artId != null) {
          $content.find(".page-album-cover").css("background-image", "url(" + (wavebox.apiClient.getArtUrl(artId, neededWidth)) + ")");
        }
      }
      $content.addClass("scroll");
      if (folders.size() > 0) {
        this.covers = new CoverListView({
          collection: folders
        });
        $content.append(this.covers.render().el);
      }
      tracks = this.folder.get("tracks");
      console.log(this.folder);
      if (tracks.length > 0) {
        view = new TrackListView({
          collection: tracks
        });
        $content.append(view.render().el);
      }
    }
    this.$el.empty().append($page.children());
    return this;
  };

  FolderView.prototype.playAll = function(e) {
    var _this = this;
    e.preventDefault();
    this.listenToOnce(this.folder, "change", function() {
      _this.folder.get("tracks").each(function(track) {
        return wavebox.audioPlayer.playQueue.add(track);
      });
      if (_this.folder.get("tracks").size() === wavebox.audioPlayer.playQueue.tracks.size()) {
        return wavebox.audioPlayer.playAt(0);
      }
    });
    this.folder.recursive = true;
    return this.folder.fetch();
  };

  return FolderView;

})(PageView);

module.exports = FolderView;

},{"../../models/folder":16,"../../utils/utils":29,"../coverList/coverListView":39,"../pageView":49,"../tracklistview":63,"./subfolderview":42}],42:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
module.exports = Backbone.View.extend({
  tagName: 'div',
  className: 'list-cover-item',
  template: _.template($("#template-cover-item").html()),
  attributes: {
    "draggable": "true"
  },
  events: {
    "click": function() {
      return wavebox.router.navigate("folders/" + (this.model.get('folderId')), {
        trigger: true
      });
    },
    "dragstart": function(e) {
      return wavebox.dragDrop.mediaDragStart(this.model);
    },
    "dragend": function() {
      return wavebox.dragDrop.mediaDragEnd();
    }
  },
  render: function() {
    var $artImg, art, url,
      _this = this;
    this.$el.html(this.template({
      itemTitle: this.model.get("folderName")
    }));
    $artImg = this.$el.find("img").first();
    art = new Image();
    art.onload = function() {
      return _this.$el.children(":first-child").css("background-image", "url(" + url + ")");
    };
    url = wavebox.apiClient.getArtUrl(this.model.get("artId"), 200);
    art.src = url;
    return this;
  }
});

},{}],43:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var CoverListView, Genres, GenresView, PageView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PageView = require('./pageView');

Genres = require('../collections/genres');

CoverListView = require('./coverList/coverListView');

GenresView = (function(_super) {
  __extends(GenresView, _super);

  function GenresView() {
    _ref = GenresView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  GenresView.prototype.tagName = "div";

  GenresView.prototype.initialize = function() {
    this.collection = new Genres;
    this.listenToOnce(this.collection, "reset", this.render);
    return this.collection.fetch({
      reset: true
    });
  };

  GenresView.prototype.render = function() {
    var $content, covers, result;
    result = GenresView.__super__.render({
      leftAccessory: "sprite-menu",
      rightAccessory: "sprite-play-queue",
      pageTitle: "Genres",
      search: true
    });
    $content = result.find(".page-content").addClass("scroll");
    covers = new CoverListView({
      collection: this.collection
    });
    $content.append(covers.render().el);
    this.$el.empty().append(result.children());
    return this;
  };

  return GenresView;

})(PageView);

module.exports = GenresView;

},{"../collections/genres":7,"./coverList/coverListView":39,"./pageView":49}],44:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var InfiniteScroll, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

InfiniteScroll = (function(_super) {
  __extends(InfiniteScroll, _super);

  function InfiniteScroll() {
    this.scroll = __bind(this.scroll, this);
    this.resize = __bind(this.resize, this);
    _ref = InfiniteScroll.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  InfiniteScroll.prototype.tagName = "div";

  InfiniteScroll.prototype.className = "infinite-scroll";

  InfiniteScroll.prototype.initialize = function(options) {
    this.itemHeight = options.itemHeight;
    this.items = [];
    this.visible = [];
    this.spacer = $("<div class='infinite-scroll-spacer'>");
    this.lastSpacerHeight = 0;
    document.body.addEventListener("scroll", this.scroll, true);
    return window.addEventListener("resize", this.resize, false);
  };

  InfiniteScroll.prototype.render = function() {
    var i, numToRender, _i, _j, _results;
    this.$el.empty();
    this.visible = [];
    this.$el.css("height", "" + (this.items.length * this.itemHeight) + "px");
    numToRender = ((window.innerHeight / this.itemHeight) + 2) * this.horizontalItemCount();
    console.log("numToRender: " + numToRender);
    this.$el.append(this.spacer);
    for (i = _i = 0; 0 <= numToRender ? _i <= numToRender : _i >= numToRender; i = 0 <= numToRender ? ++_i : --_i) {
      if (this.items[i] != null) {
        this.$el.append(this.items[i].$el);
      }
    }
    this.visible = (function() {
      _results = [];
      for (var _j = 0; 0 <= numToRender ? _j <= numToRender : _j >= numToRender; 0 <= numToRender ? _j++ : _j--){ _results.push(_j); }
      return _results;
    }).apply(this);
    console.log(this.visible.length);
    return this;
  };

  InfiniteScroll.prototype.resize = function() {
    var item;
    item = this.$el.find(".list-cover-item").first();
    console.log("resize! " + (this.horizontalItemCount()));
    return this.scroll();
  };

  InfiniteScroll.prototype.scroll = function() {
    var scrollDelayCallback,
      _this = this;
    clearTimeout(this.scrollDelayTimeout);
    scrollDelayCallback = function() {
      var $scroll, add, i, numToRender, remove, shouldBeVisible, spacerHeight, top, topIndex, visibleIndices, _i, _j, _len, _ref1, _results;
      $scroll = _this.$el.closest(".scroll");
      top = $scroll.scrollTop();
      topIndex = Math.floor(top / _this.itemHeight) * _this.horizontalItemCount();
      console.log(topIndex);
      numToRender = Math.ceil(((window.innerHeight / _this.itemHeight) + 2) * _this.horizontalItemCount());
      shouldBeVisible = (function() {
        _results = [];
        for (var _i = topIndex, _ref1 = topIndex + numToRender; topIndex <= _ref1 ? _i <= _ref1 : _i >= _ref1; topIndex <= _ref1 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      remove = _.difference(_this.visible, shouldBeVisible);
      add = _.difference(shouldBeVisible, _this.visible);
      _.each(remove, function(index) {
        console.log("removing " + index);
        console.log(_this.items[index]);
        return _this.items[index].$el.remove();
      });
      console.log(add);
      console.log(remove);
      visibleIndices = _.pluck(_this.visible, 'index');
      spacerHeight = Math.floor(topIndex / _this.horizontalItemCount) * _this.itemHeight;
      _this.spacer.css("margin-top", "" + spacerHeight + "px");
      _this.visible = shouldBeVisible;
      for (_j = 0, _len = add.length; _j < _len; _j++) {
        i = add[_j];
        if (spacerHeight > _this.lastSpacerHeight) {
          console.log("appending " + i);
          _this.$el.append(_this.items[i].$el);
        } else {
          console.log("prepending " + i);
          _this.$el.prepend(_this.items[i].$el);
        }
      }
      return _this.lastSpacerHeight = spacerHeight;
    };
    return this.scrollDelayTimeout = setTimeout(scrollDelayCallback, 50);
  };

  InfiniteScroll.prototype.add = function(element) {
    return this.items.push({
      $el: element,
      index: this.items.length
    });
  };

  InfiniteScroll.prototype.horizontalItemCount = function() {
    var width;
    if (wavebox.isMobile()) {
      return 1;
    } else {
      width = window.innerWidth;
      if (width <= 1000) {
        return 5;
      } else if (width <= 1200) {
        return 6;
      } else {
        return 7;
      }
    }
  };

  return InfiniteScroll;

})(Backbone.View);

module.exports = InfiniteScroll;

},{}],45:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var NavSidebarItemView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

NavSidebarItemView = (function(_super) {
  __extends(NavSidebarItemView, _super);

  function NavSidebarItemView() {
    _ref = NavSidebarItemView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  NavSidebarItemView.prototype.tagName = "a";

  NavSidebarItemView.prototype.template = _.template($("#template-sidebar-item").html());

  NavSidebarItemView.prototype.events = {
    "click": function(e) {
      wavebox.appController.mainView.resetNext = true;
      wavebox.appController.mainView.animateNext = false;
      return true;
    }
  };

  NavSidebarItemView.prototype.initialize = function() {
    return this.listenTo(wavebox.appController, "sidebarItemSelected", this.itemSelected);
  };

  NavSidebarItemView.prototype.itemSelected = function(name) {
    if (name === this.model.get("itemTitle")) {
      return this.$el.addClass("SidebarIconsActive");
    } else {
      return this.$el.removeClass("SidebarIconsActive");
    }
  };

  NavSidebarItemView.prototype.render = function() {
    var $temp, temp;
    temp = document.createElement("div");
    $temp = $(temp);
    $temp.append(this.template({
      itemTitle: this.model.get("itemTitle" || ""),
      itemClass: this.model.get("itemClass" || "")
    }));
    this.$el.attr("href", this.model.get("href") || "");
    this.$el.append($temp.children());
    return this;
  };

  return NavSidebarItemView;

})(Backbone.View);

module.exports = NavSidebarItemView;

},{}],46:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var SidebarItem, SidebarItemView, SidebarSection;

SidebarSection = require("../collections/sidebarsection");

SidebarItemView = require("./navsidebaritemview");

SidebarItem = require("../models/sidebaritem");

module.exports = Backbone.View.extend({
  tagName: "ul",
  className: "SidebarMenu",
  defaults: {
    collection: new SidebarSection
  },
  initialize: function(options) {
    var models,
      _this = this;
    this.options = options;
    this.title = options.title;
    models = [];
    _.each(options.items, function(element, index, list) {
      return models.push(new SidebarItem(element));
    });
    return this.collection = new SidebarSection(models);
  },
  events: {
    "reset": "render"
  },
  renderHeader: function() {
    var header;
    console.log("render header called: " + this.title);
    if (this.title != null) {
      header = document.createElement("li");
      header.innerHTML = this.title;
      header.className = "navigation-section-header";
      return this.$el.empty().append(header);
    }
  },
  render: function() {
    var $temp, temp;
    this.renderHeader();
    temp = document.createElement("a");
    $temp = $(temp);
    this.collection.each(function(element, index, list) {
      var view;
      view = new SidebarItemView({
        model: element
      });
      return $temp.append(view.render().el);
    });
    this.$el.append($temp.children());
    return this;
  }
});

},{"../collections/sidebarsection":9,"../models/sidebaritem":22,"./navsidebaritemview":45}],47:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var NavSidebarView, PlaylistsSectionView, ServerSearchView, SidebarSectionView, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SidebarSectionView = require("./navsidebarsectionview");

PlaylistsSectionView = require("./playlists/playlistsSectionView");

ServerSearchView = require("./serverSearchView");

NavSidebarView = (function(_super) {
  __extends(NavSidebarView, _super);

  function NavSidebarView() {
    this.toggleSearch = __bind(this.toggleSearch, this);
    _ref = NavSidebarView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  NavSidebarView.prototype.el = "#left";

  NavSidebarView.prototype.initialize = function() {
    this.serverSearch = new ServerSearchView;
    this.serverSectionView = new SidebarSectionView({
      items: [
        {
          itemTitle: "MyServer",
          itemClass: "Cloud sprite",
          accessoryClass: "Settings",
          href: "#"
        }
      ]
    });
    this.browseSectionView = new SidebarSectionView({
      title: "Browse",
      items: [
        {
          itemTitle: "Artists",
          itemClass: "sprite-music-note",
          href: "#albumartists"
        }, {
          itemTitle: "Albums",
          itemClass: "sprite-cd",
          href: "#albums"
        }, {
          itemTitle: "Folders",
          itemClass: "sprite-folder",
          href: "#folders"
        }, {
          itemTitle: "Genres",
          itemClass: "sprite-folder",
          href: "#genres"
        }
      ]
    });
    this.playlistSectionView = new PlaylistsSectionView({
      title: "Playlists"
    });
    this.settingSectionView = new SidebarSectionView({
      title: "Settings",
      items: [
        {
          itemTitle: "Settings",
          itemClass: "sprite-cog",
          href: "#settings"
        }, {
          itemTitle: "Log out",
          itemClass: "",
          href: "#login"
        }
      ]
    });
    return this.listenTo(this.serverSearch, "serverSearchResultsToggle", this.toggleSearch);
  };

  NavSidebarView.prototype.render = function() {
    var $temp;
    console.log("rendering dat navsidebarview");
    $temp = $("<div>");
    $temp.append(this.browseSectionView.render().el);
    $temp.append(this.playlistSectionView.render().el);
    $temp.append(this.settingSectionView.render().el);
    if (this.$nav == null) {
      this.$nav = $("#nav");
    }
    this.$nav.empty().append($temp.children());
    this.$el.find(".server-search-container").append(this.serverSearch.render().$el);
    return this;
  };

  NavSidebarView.prototype.toggleSearch = function() {
    if (this.serverSearch.visible) {
      this.serverSearch.hide();
      return this.$nav.transit({
        y: 0
      }, 250, "ease-out");
    } else {
      this.serverSearch.show();
      return this.$nav.transit({
        y: window.innerHeight
      }, 250, "ease-out");
    }
  };

  return NavSidebarView;

})(Backbone.View);

module.exports = NavSidebarView;

},{"./navsidebarsectionview":46,"./playlists/playlistsSectionView":52,"./serverSearchView":59}],48:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var OrderedTableView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

OrderedTableView = (function(_super) {
  __extends(OrderedTableView, _super);

  function OrderedTableView() {
    _ref = OrderedTableView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  OrderedTableView.prototype.tagName = "div";

  OrderedTableView.prototype.className = "ordered-table";

  OrderedTableView.prototype.itemTemplate = _.template($("#template-ordered-table-item").html());

  OrderedTableView.prototype.newItemTemplate = _.template($("#template-ordered-table-item-new").html());

  OrderedTableView.prototype.events = {
    "click .sprite-plus-tiny": "move",
    "click .sprite-minus-tiny": "move",
    "keydown .ordered-table-item-input": "done",
    "click .sprite-check-mark": "done"
  };

  OrderedTableView.prototype.initialize = function(options) {
    if (options.items != null) {
      return this.items = options.items;
    }
  };

  OrderedTableView.prototype.render = function() {
    var _this = this;
    this.$el.empty();
    _.each(this.items, function(item, index) {
      return _this.$el.append(_this.itemTemplate({
        title: item,
        index: index
      }));
    });
    this.$el.append(this.newItemTemplate());
    return this;
  };

  OrderedTableView.prototype.move = function(e) {
    var destination, index;
    index = parseInt($(e.target).parent().attr("data-index"));
    destination = e.target.className.indexOf("sprite-minus-tiny") >= 0 ? (console.log("plus"), index + 1) : index - 1;
    if (destination < 0 || destination > this.items.length - 1) {
      return;
    }
    this.items.splice(destination, 0, this.items.splice(index, 1)[0]);
    this.render();
    return console.log;
  };

  OrderedTableView.prototype.done = function(e) {
    var value;
    console.log(e.target.nodeName, e.keyCode);
    value = "";
    if ((e.keyCode != null) && e.keyCode === 13) {
      value = $(e.target).val();
    } else if (e.target.nodeName !== "INPUT") {
      value = this.$el.find(".ordered-table-item-input").val();
    }
    if (value.length > 0) {
      return this.add(value);
    }
  };

  OrderedTableView.prototype.add = function(value) {
    this.items.push(value);
    this.render();
    this.$el.find(".ordered-table-item-input").focus();
    return this.trigger("change");
  };

  return OrderedTableView;

})(Backbone.View);

module.exports = OrderedTableView;

},{}],49:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var PageView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PageView = (function(_super) {
  __extends(PageView, _super);

  function PageView() {
    _ref = PageView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  PageView.prototype.tagName = "div";

  PageView.prototype.template = _.template($("#template-page").html());

  PageView.prototype.search = _.template($("#template-page-search").html());

  PageView.prototype.render = function(options) {
    var $page;
    $page = $("<div>");
    $page.append(this.template(options));
    if (options.search === true) {
      $page.find(".page-content").addClass("page-content-search").before(this.search());
    }
    $page.find(".page-header").on("click", function() {
      return scrollToTop($(this).parent().find(".page-content")[0]);
    });
    return $page;
  };

  return PageView;

})(Backbone.View);

module.exports = PageView;

},{}],50:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var PageView, Playlist, PlaylistListingView, TrackListView, Utils, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TrackListView = require('../tracklistview');

Playlist = require('../../models/playlist');

Utils = require('../../utils/utils');

PageView = require('../pageView');

PlaylistListingView = (function(_super) {
  __extends(PlaylistListingView, _super);

  function PlaylistListingView() {
    _ref = PlaylistListingView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  PlaylistListingView.prototype.tagName = "div";

  PlaylistListingView.prototype.className = "mediaPage";

  PlaylistListingView.prototype.template = _.template($("#template-page-album").html());

  PlaylistListingView.prototype.events = {
    "click .collection-actions-play-all": "playAll"
  };

  PlaylistListingView.prototype.initialize = function(options) {
    if (options.playlistId != null) {
      this.contentLoaded = false;
      console.log("Playlist listing view initialize");
      this.playlist = new Playlist({
        id: options.playlistId
      });
      this.listenToOnce(this.playlist, "change", function() {
        this.contentLoaded = true;
        return this.render();
      });
      return this.playlist.fetch();
    }
  };

  PlaylistListingView.prototype.render = function() {
    var $content, $temp, art, artId, artUrl, duration, playlistName, totalDuration, trackCount, trackListView, tracks,
      _this = this;
    if (this.contentLoaded) {
      artId = this.playlist.get("artId");
      if (artId != null) {
        console.log("there's an art id!");
        artUrl = wavebox.apiClient.getArtUrl(this.playlist.get("artId"), 300);
        art = new Image;
        art.onload = function() {
          return _this.$el.find(".main-albumArt").css("background-image", "url('" + artUrl + "')").children().css("opacity", 0);
        };
        art.src = artUrl;
      }
      playlistName = this.playlist.get("name");
      duration = 0;
      tracks = this.playlist.get("tracks");
      totalDuration = Utils.formattedTimeWithSeconds(this.playlist.get("duration"));
      trackCount = tracks.size();
    }
    $temp = PlaylistListingView.__super__.render({
      leftAccessory: "sprite-menu",
      rightAccessory: "sprite-play-queue",
      artUrl: artUrl || "",
      pageTitle: playlistName || "",
      totalDuration: totalDuration || "",
      trackCount: trackCount || ""
    });
    $content = $temp.find('.page-content');
    if (this.contentLoaded) {
      console.log("playlistListingView tracks: ");
      console.log(tracks);
      trackListView = new TrackListView({
        collection: tracks,
        artUrl: artUrl
      });
      $content.append(this.template({
        artUrl: artUrl || "",
        totalDuration: Utils.formattedTimeWithSeconds(duration),
        trackCount: tracks.size(),
        artistName: "",
        albumName: playlistName || ""
      }));
      $content.append(trackListView.render().el);
      $content.addClass("scroll");
    } else {
      console.log("playlistListingView content not loaded");
      $temp.append("Loading");
    }
    this.$el.empty().append($temp.children());
    return this;
  };

  PlaylistListingView.prototype.playAll = function(e) {
    e.preventDefault();
    return this.playlist.get("tracks").each(function(track) {
      return wavebox.audioPlayer.playQueue.add(track);
    });
  };

  return PlaylistListingView;

})(PageView);

module.exports = PlaylistListingView;

},{"../../models/playlist":18,"../../utils/utils":29,"../pageView":49,"../tracklistview":63}],51:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var ActionSheetView, NavSidebarItemView, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

NavSidebarItemView = require('../navsidebaritemview');

ActionSheetView = require('../actionSheet/actionSheetView');

module.exports = (function(_super) {
  __extends(_Class, _super);

  function _Class() {
    this["delete"] = __bind(this["delete"], this);
    _ref = _Class.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  _Class.prototype.events = {
    "dragover": function(e) {
      e.preventDefault();
      return this.$el.children().first().addClass("playlistDragOver");
    },
    "dragleave": function(e) {
      return this.$el.children().first().removeClass("playlistDragOver");
    },
    "drop": function(e) {
      var item, itemId,
        _this = this;
      this.$el.children().first().removeClass("playlistDragOver");
      item = wavebox.dragDrop.dropObject;
      itemId = item.get("itemId") || item.get("folderId") || item.get("artistId") || item.get("albumId");
      wavebox.apiClient.addToPlaylist(this.model.get("id"), [itemId], function() {});
      return wavebox.dragDrop.mediaDragEnd();
    },
    "contextmenu": "contextmenu"
  };

  _Class.prototype.initialize = function() {
    return this.listenTo(wavebox.appController, "sidebarItemSelected", this.itemSelected);
  };

  _Class.prototype.itemSelected = function(playlistId) {
    if (playlistId === ("playlist " + (this.model.get("id")))) {
      return this.$el.addClass("SidebarIconsActive");
    } else {
      return this.$el.removeClass("SidebarIconsActive");
    }
  };

  _Class.prototype.render = function() {
    this.model.set("href", "#playlists/" + (this.model.get("id")));
    this.model.set({
      "itemTitle": this.model.get("name"),
      "itemClass": "sprite-playlist"
    });
    _Class.__super__.render.apply(this, arguments);
    return this;
  };

  _Class.prototype.contextmenu = function(e) {
    var sheet;
    console.log("showing action sheet");
    sheet = new ActionSheetView({
      song: this.model,
      items: [
        {
          "itemTitle": "Delete playlist",
          "action": this["delete"]
        }
      ],
      origin: {
        x: e.pageX,
        y: e.pageY
      }
    }).render();
    $(document.body).append(sheet.el);
    sheet.show();
    return false;
  };

  _Class.prototype["delete"] = function() {
    this.model.destroy();
    return this.remove();
  };

  return _Class;

})(NavSidebarItemView);

},{"../actionSheet/actionSheetView":32,"../navsidebaritemview":45}],52:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var CreatePlaylistSidebarItemView, PlaylistSectionView, PlaylistSidebarItemView, Playlists, SidebarSectionView, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Playlists = require("../../collections/playlists");

SidebarSectionView = require("../navsidebarsectionview");

PlaylistSidebarItemView = require("./playlistSidebarItemView");

CreatePlaylistSidebarItemView = require('../createPlaylistSidebarItemView');

PlaylistSectionView = (function(_super) {
  __extends(PlaylistSectionView, _super);

  function PlaylistSectionView() {
    this.mediaDragEnd = __bind(this.mediaDragEnd, this);
    this.mediaDragStart = __bind(this.mediaDragStart, this);
    _ref = PlaylistSectionView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  PlaylistSectionView.prototype.initialize = function(options) {
    var _this = this;
    this.options = options;
    this.title = options.title;
    this.filter = "";
    this.collection = new Playlists;
    this.create = new CreatePlaylistSidebarItemView;
    this.listenToOnce(this.collection, "reset", function() {
      return _this.render();
    });
    this.listenTo(wavebox.dragDrop, "mediaDragStart", this.mediaDragStart);
    this.listenTo(wavebox.dragDrop, "mediaDragEnd", this.mediaDragEnd);
    this.listenTo(this.create.model, "changed", this.newPlaylist);
    return this.collection.fetch({
      reset: true
    });
  };

  PlaylistSectionView.prototype.render = function() {
    var $temp,
      _this = this;
    this.renderHeader();
    $temp = $('<div>');
    this.collection.each(function(playlist) {
      var view;
      if (playlist.get("name") !== "jukeboxQPbjnbh2JPU5NGxhXiiQ") {
        view = new PlaylistSidebarItemView({
          model: playlist
        });
        return $temp.append(view.render().el);
      }
    });
    $temp.append(this.create.render().el);
    this.$el.append($temp.children());
    return this;
  };

  PlaylistSectionView.prototype.newPlaylist = function() {
    this.listenTo(this.collection, "reset", this.render);
    return this.collection.fetch({
      reset: true
    });
  };

  PlaylistSectionView.prototype.mediaDragStart = function() {
    return this.$el.append($("<div>").addClass("dropzone-callout"));
  };

  PlaylistSectionView.prototype.mediaDragEnd = function() {
    return this.$el.find(".dropzone-callout").remove();
  };

  return PlaylistSectionView;

})(SidebarSectionView);

module.exports = PlaylistSectionView;

},{"../../collections/playlists":8,"../createPlaylistSidebarItemView":40,"../navsidebarsectionview":46,"./playlistSidebarItemView":51}],53:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Utils;

Utils = require('../../../utils/utils');

module.exports = Backbone.View.extend({
  el: "#mini-player",
  template: _.template($("#template-mini-player").html()),
  events: {
    "click #PlayBtn": "playButtonAction",
    "click .mini-player-text-area": "seek"
  },
  initialize: function() {
    this.elapsedMode = "timeElapsed";
    this.listenTo(wavebox.audioPlayer, "newSong", this.render);
    this.listenTo(wavebox.audioPlayer, "timeUpdate", this.timeUpdate);
    return this.listenTo(wavebox.audioPlayer, "playPause", this.playButtonUpdate);
  },
  render: function() {
    var song, temp;
    song = wavebox.audioPlayer.playQueue.currentSong();
    temp = null;
    if (song != null) {
      temp = this.template({
        songName: song.get("songName"),
        artistName: song.get("artistName"),
        duration: song.formattedDuration()
      });
    } else {
      temp = this.template({
        songName: "",
        artistName: "",
        duration: ""
      });
    }
    this.$el.empty().append(temp);
    this.playerWidth = this.$el.find(".mini-player-text-area").first().width();
    this.playMarker = this.$el.find(".mini-player-playhead").first();
    this.elapsedTime = this.$el.find(".mini-player-elapsed").first();
    if (song == null) {
      return this.playMarker.hide();
    }
  },
  playButtonAction: function() {
    console.log("playBtn");
    return wavebox.audioPlayer.playPause();
  },
  playButtonUpdate: function() {
    if (wavebox.audioPlayer.playing()) {
      return $("#PlayBtn").removeClass("sprite-play").addClass("sprite-pause");
    } else {
      return $("#PlayBtn").removeClass("sprite-pause").addClass("sprite-play");
    }
  },
  timeUpdate: function() {
    this.updateElapsedTime();
    return this.updatePlayMarker();
  },
  switchElapsedMode: function() {
    console.log("clicked");
    this.elapsedMode = (function() {
      switch (this.elapsedMode) {
        case "timeLeft":
          return "timeElapsed";
        case "timeElapsed":
          return "timeLeft";
        default:
          return "timeLeft";
      }
    }).call(this);
    return this.updateElapsedTime();
  },
  updateElapsedTime: function() {
    var duration, elapsed, elapsedUpdate;
    duration = wavebox.audioPlayer.playQueue.currentSong().get("duration");
    elapsed = wavebox.audioPlayer.get("elapsed");
    elapsedUpdate = this.elapsedMode === "timeLeft" ? Utils.formattedTimeWithSeconds(duration - elapsed) : Utils.formattedTimeWithSeconds(elapsed);
    return this.elapsedTime.text(elapsedUpdate);
  },
  updatePlayMarker: function() {
    var duration, elapsed;
    duration = wavebox.audioPlayer.playQueue.currentSong().get("duration");
    elapsed = wavebox.audioPlayer.get("elapsed");
    return this.playMarker.css("left", Math.round((elapsed / duration) * this.playerWidth));
  },
  seek: function(e) {
    var percent;
    percent = (e.pageX - $(".mini-player-text-area").offset().left) / $(".mini-player-text-area").width();
    percent = percent * 100;
    console.log("seek percent: " + percent);
    return wavebox.audioPlayer.seek(percent);
  }
});

},{"../../../utils/utils":29}],54:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var ActionSheetView, PlayQueueItemView, Track, Utils, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Track = require('../../../models/track');

Utils = require('../../../utils/utils');

ActionSheetView = require('../../actionSheet/actionSheetView');

PlayQueueItemView = (function(_super) {
  __extends(PlayQueueItemView, _super);

  function PlayQueueItemView() {
    this.showActionSheet = __bind(this.showActionSheet, this);
    _ref = PlayQueueItemView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  PlayQueueItemView.prototype.model = Track;

  PlayQueueItemView.prototype.tagName = "div";

  PlayQueueItemView.prototype.className = "play-queue-item";

  PlayQueueItemView.prototype.template = _.template($("#template-play-queue-item").html());

  PlayQueueItemView.prototype.attributes = {
    "draggable": "true"
  };

  PlayQueueItemView.prototype.events = {
    "click": "click",
    "dragstart": "dragstart",
    "dragenter": "dragenter",
    "dragover": "dragover",
    "drop": "drop",
    "contextmenu": "rightClick",
    "touchstart": "beginPress",
    "touchmove": "touchmove",
    "touchend": "endPress"
  };

  PlayQueueItemView.prototype.render = function() {
    var _this = this;
    this.$el.append(this.template({
      songName: this.model.get("songName"),
      artistName: this.model.get("artistName"),
      duration: Utils.formattedTimeWithSeconds(this.model.get("duration"))
    }));
    setTimeout(function() {
      var index, nowPlayingIndex;
      index = _this.$el.index();
      nowPlayingIndex = wavebox.audioPlayer.playQueue.get("nowPlayingIndex");
      if ((nowPlayingIndex != null) && index === nowPlayingIndex) {
        return _this.$el.addClass("play-queue-now-playing", 0);
      }
    });
    return this;
  };

  PlayQueueItemView.prototype.click = function() {
    wavebox.audioPlayer.playAt(wavebox.audioPlayer.playQueue.tracks.indexOf(this.model));
    return console.log(this);
  };

  PlayQueueItemView.prototype.dragstart = function(e) {
    var _this = this;
    return setTimeout(function() {
      wavebox.dragDrop.dropObject = _this;
      return _this.$el.addClass("play-queue-dragged-item");
    }, 0);
  };

  PlayQueueItemView.prototype.dragend = function(e) {
    this.$el.removeClass("play-queue-dragged-item");
    this.$el.parent().find(".play-queue-drag-position-indicator-top").removeClass("play-queue-drag-position-indicator-top");
    return this.$el.parent().find(".play-queue-drag-position-indicator-bottom").removeClass("play-queue-drag-position-indicator-bottom");
  };

  PlayQueueItemView.prototype.dragover = function(e) {
    var dragIndex, index, playQueueCount;
    this.$el.parent().find(".play-queue-drag-position-indicator-top").removeClass("play-queue-drag-position-indicator-top");
    this.$el.parent().find(".play-queue-drag-position-indicator-bottom").removeClass("play-queue-drag-position-indicator-bottom");
    index = this.$el.index();
    dragIndex = wavebox.dragDrop.dropObject.$el.index();
    playQueueCount = wavebox.audioPlayer.playQueue.tracks.length;
    if (index === playQueueCount - 1 && index !== dragIndex) {
      this.$el.addClass("play-queue-drag-position-indicator-bottom");
    }
    if (index !== dragIndex && index !== dragIndex + 1) {
      return this.$el.addClass("play-queue-drag-position-indicator-top");
    }
  };

  PlayQueueItemView.prototype.drop = function() {
    var item;
    if (wavebox.dragDrop.dropObject.constructor.name !== "PlayQueueItemView") {
      wavebox.dragDrop.dropIndex = _.indexOf(wavebox.audioPlayer.playQueue.tracks.models, this.model);
      return;
    }
    item = wavebox.dragDrop.dropObject;
    return wavebox.audioPlayer.playQueue.move(item.model, _.indexOf(wavebox.audioPlayer.playQueue.tracks.models, this.model));
  };

  PlayQueueItemView.prototype.showActionSheet = function(origin) {
    var sheet,
      _this = this;
    this.actionSheetShown = true;
    sheet = new ActionSheetView({
      song: this.model,
      items: [
        {
          itemTitle: "Clear play queue",
          action: function() {
            return wavebox.audioPlayer.playQueue.clear();
          }
        }, {
          itemTitle: "Remove",
          action: function() {
            var index;
            index = _this.el.offsetTop / 50;
            console.log(index);
            return wavebox.audioPlayer.playQueue.remove(index);
          }
        }
      ],
      origin: origin
    });
    $(document.body).append(sheet.render().el);
    return sheet.show();
  };

  PlayQueueItemView.prototype.rightClick = function(e) {
    this.showActionSheet({
      x: e.pageX,
      y: e.pageY
    });
    return false;
  };

  PlayQueueItemView.prototype.beginPress = function(e) {
    this.touchStartX = e.originalEvent.pageX;
    this.touchStartY = e.originalEvent.pageY;
    this.longPressTimer = setTimeout(this.showActionSheet, 500);
    return true;
  };

  PlayQueueItemView.prototype.touchmove = function(e) {
    var didMoveX, didMoveY;
    if (!this.cancelSheet) {
      didMoveX = Math.abs(e.originalEvent.pageX - this.touchStartX) > 10;
      didMoveY = Math.abs(e.originalEvent.pageY - this.touchStartY) > 10;
      this.cancelSheet = didMoveX || didMoveY;
      console.log("cancelSheet: " + this.cancelSheet);
      if (this.cancelSheet) {
        clearTimeout(this.longPressTimer);
      }
    }
    return true;
  };

  PlayQueueItemView.prototype.endPress = function(e) {
    var wasShown;
    clearTimeout(this.longPressTimer);
    this.cancelSheet = false;
    wasShown = this.actionSheetShown;
    this.actionSheetShown = false;
    return !wasShown;
  };

  return PlayQueueItemView;

})(Backbone.View);

module.exports = PlayQueueItemView;

},{"../../../models/track":23,"../../../utils/utils":29,"../../actionSheet/actionSheetView":32}],55:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var PlayQueueItemView;

PlayQueueItemView = require('./playQueueItemView');

module.exports = Backbone.View.extend({
  el: "#play-queue",
  initialize: function() {
    console.log(this.model);
    this.listenTo(this.model, "change", this.render);
    this.listenTo(wavebox.audioPlayer, "newSong", this.render);
    this.listenTo(wavebox.dragDrop, "mediaDragStart", this.mediaDragStart);
    return this.listenTo(wavebox.dragDrop, "mediaDragEnd", this.mediaDragEnd);
  },
  events: {
    "dragover": "dragover",
    "drop": "drop"
  },
  render: function() {
    var $container;
    $container = $("<div>");
    this.model.tracks.each(function(track) {
      var view;
      view = new PlayQueueItemView({
        model: track
      });
      return $container.append(view.render().el);
    });
    return this.$el.empty().append($container.children());
  },
  mediaDragStart: function() {
    console.log(this.el);
    return this.$el.append($("<div>").addClass("dropzone-callout"));
  },
  mediaDragEnd: function() {
    return this.$el.find(".dropzone-callout").remove();
  },
  dragover: function(e) {
    e.preventDefault();
    return console.log("Drag over play queue");
  },
  drop: function(e) {
    var addIndex, item,
      _this = this;
    item = wavebox.dragDrop.dropObject;
    if (item != null) {
      switch (item.constructor.name) {
        case "Folder":
          item.recursive = true;
          break;
        case "Artist":
          item.shouldRetrieveSongs = true;
          break;
        case "Track":
          wavebox.audioPlayer.playQueue.add(item, wavebox.dragDrop.dropIndex);
          return;
        default:
          if (item.constructor.name !== "Album") {
            console.log("invalid drop item type: " + item.constructor.name);
            return;
          }
      }
      addIndex = wavebox.dragDrop.dropIndex;
      console.log("addIndex: " + addIndex);
      this.listenToOnce(item, "change", function() {
        return item.get("tracks").each(function(track) {
          wavebox.audioPlayer.playQueue.add(track, addIndex);
          return addIndex += 1;
        });
      });
      return item.fetch();
    }
  }
});

},{"./playQueueItemView":54}],56:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var MiniPlayerView, PlayQueueView;

PlayQueueView = require('./playQueue/playQueueView');

MiniPlayerView = require('./miniPlayer/miniPlayerView');

module.exports = Backbone.View.extend({
  el: "#right",
  initialize: function() {
    this.miniPlayer = new MiniPlayerView;
    this.playQueue = new PlayQueueView({
      model: wavebox.audioPlayer.playQueue
    });
    this.listenTo(wavebox.audioPlayer.playQueue, "change:shuffle", this.shuffleChanged);
    return this.listenTo(wavebox.audioPlayer.playQueue, "change:repeat", this.repeatChanged);
  },
  events: function() {
    return {
      "click .shuffle": function() {
        return wavebox.audioPlayer.playQueue.shuffleToggle();
      },
      "click .repeat": function() {
        return wavebox.audioPlayer.playQueue.repeatToggle();
      }
    };
  },
  render: function() {
    this.miniPlayer.render();
    this.playQueue.render();
    return this;
  },
  shuffleChanged: function() {
    var $shuffle, status;
    status = wavebox.audioPlayer.playQueue.get("shuffle");
    $shuffle = this.$el.find(".shuffle");
    if (status) {
      return $shuffle.removeClass("off");
    } else {
      return $shuffle.addClass("off");
    }
  },
  repeatChanged: function() {
    var $repeat, repeat;
    repeat = wavebox.audioPlayer.playQueue.get("repeat");
    console.log(repeat);
    $repeat = this.$el.find(".repeat");
    switch (repeat) {
      case "one":
        return $repeat.addClass("sprite-repeat-one").removeClass("off");
      case false:
        return $repeat.removeClass("sprite-repeat-one").addClass("off");
      case "all":
        return $repeat.removeClass("sprite-repeat-one off");
    }
  }
});

},{"./miniPlayer/miniPlayerView":53,"./playQueue/playQueueView":55}],57:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var ServerSearchResultsItemView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ServerSearchResultsItemView = (function(_super) {
  __extends(ServerSearchResultsItemView, _super);

  function ServerSearchResultsItemView() {
    _ref = ServerSearchResultsItemView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ServerSearchResultsItemView.prototype.tagName = "a";

  ServerSearchResultsItemView.prototype.template = _.template($("#template-server-search-result-item").html());

  ServerSearchResultsItemView.prototype.events = {
    "click": "click"
  };

  ServerSearchResultsItemView.prototype.render = function() {
    var $image, fields;
    if (this.model.pageUrl != null) {
      this.el.href = this.model.pageUrl();
    }
    fields = this.model.coverViewFields();
    this.$el.empty().append(this.template({
      itemTitle: fields.title,
      itemSubtitle: fields.subtitle
    }));
    $image = this.$el.find(".server-search-result-item-image");
    if (fields.artId != null) {
      $image.css({
        "background-image": "url(" + (wavebox.apiClient.getArtUrl(fields.artId, 50)) + ")"
      });
    } else if (fields.musicBrainzId != null) {
      $image.css({
        "background-image": "url(" + (wavebox.apiClient.getArtistArtUrl(fields.musicBrainzId, true)) + ")"
      });
    }
    return this;
  };

  ServerSearchResultsItemView.prototype.click = function() {
    if (this.model.constructor.name === "Track") {
      wavebox.audioPlayer.playQueue.add(this.model);
      return false;
    } else {
      wavebox.appController.mainView.resetNext = true;
      wavebox.appController.mainView.animateNext = false;
    }
    return true;
  };

  return ServerSearchResultsItemView;

})(Backbone.View);

module.exports = ServerSearchResultsItemView;

},{}],58:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var AlbumArtists, Albums, Artists, ServerSearchResultsItemView, ServerSearchResultsSectionView, TrackList, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Artists = require('../collections/artists');

Albums = require('../collections/albums');

TrackList = require('../collections/tracklist');

AlbumArtists = require('../collections/albumArtists');

ServerSearchResultsItemView = require('./serverSearchResultsItemView');

ServerSearchResultsSectionView = (function(_super) {
  __extends(ServerSearchResultsSectionView, _super);

  function ServerSearchResultsSectionView() {
    _ref = ServerSearchResultsSectionView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ServerSearchResultsSectionView.prototype.tagName = "ul";

  ServerSearchResultsSectionView.prototype.className = "server-search-results-section";

  ServerSearchResultsSectionView.prototype.initialize = function(options) {
    if (options != null) {
      this.type = options.type;
      switch (this.type) {
        case "songs":
          this.collection = new TrackList(options.collection);
          break;
        case "albums":
          this.collection = new Albums(options.collection);
          break;
        case "artists":
          this.collection = new Artists(options.collection);
          break;
        case "albumArtists":
          this.collection = new AlbumArtists(options.collection);
      }
      return this.title = this.type !== "albumArtists" ? this.type : "artists";
    }
  };

  ServerSearchResultsSectionView.prototype.render = function() {
    var $temp, header;
    $temp = $("<div>");
    if (this.collection.size() > 0) {
      header = document.createElement("div");
      header.className = "server-search-results-section-header";
      header.innerText = this.title.toUpperCase();
      $temp.append(header);
    }
    this.collection.each(function(item) {
      var view;
      view = new ServerSearchResultsItemView({
        model: item
      });
      return $temp.append(view.render().el);
    });
    this.$el.append($temp.children());
    return this;
  };

  return ServerSearchResultsSectionView;

})(Backbone.View);

module.exports = ServerSearchResultsSectionView;

},{"../collections/albumArtists":3,"../collections/albums":4,"../collections/artists":5,"../collections/tracklist":10,"./serverSearchResultsItemView":57}],59:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var ServerSearch, ServerSearchResultsSectionView, ServerSearchView, Utils, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ServerSearch = require('../models/serverSearch');

ServerSearchResultsSectionView = require('./serverSearchResultsSectionView');

Utils = require('../utils/utils');

ServerSearchView = (function(_super) {
  __extends(ServerSearchView, _super);

  function ServerSearchView() {
    this.handleSpecialKeystrokes = __bind(this.handleSpecialKeystrokes, this);
    _ref = ServerSearchView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ServerSearchView.prototype.template = _.template($("#template-server-search").html());

  ServerSearchView.prototype.events = {
    "focus .server-search-input": "focus",
    "blur .server-search-input": "blur",
    "input": "textboxChanged"
  };

  ServerSearchView.prototype.initialize = function() {
    this.model = new ServerSearch;
    this.listenTo(this.model, "change:results", this.renderResults);
    this.visible = false;
    this.inputFocused = false;
    this.cancelNext = false;
    return document.addEventListener("keydown", this.handleSpecialKeystrokes, true);
  };

  ServerSearchView.prototype.render = function() {
    this.$el.append(this.template());
    this.$textbox = this.$el.find(".server-search-input");
    this.$results = this.$el.find(".server-search-results");
    return this;
  };

  ServerSearchView.prototype.renderResults = function(model, value, options) {
    var key, view, _results;
    this.$results.empty();
    if ((value != null) && this.$textbox.val() !== "") {
      _results = [];
      for (key in value) {
        if (key === "error" || key === "videos" || key === "artists") {
          continue;
        } else {
          if (!this.visible) {
            this.trigger("serverSearchResultsToggle");
          }
          view = new ServerSearchResultsSectionView({
            type: key,
            collection: value[key]
          });
          _results.push(this.$results.append(view.render().el));
        }
      }
      return _results;
    } else if (this.visible) {
      return this.trigger("serverSearchResultsToggle");
    }
  };

  ServerSearchView.prototype.hide = function() {
    this.$results.css("opacity", "0");
    return this.visible = false;
  };

  ServerSearchView.prototype.show = function() {
    this.$results.css("opacity", "1");
    return this.visible = true;
  };

  ServerSearchView.prototype.focus = function() {
    return this.inputFocused = true;
  };

  ServerSearchView.prototype.blur = function(e) {
    return Utils.delay(200, function() {
      return this.inputFocused = false;
    });
  };

  ServerSearchView.prototype.textboxChanged = function() {
    return this.model.set("query", this.$textbox.val());
  };

  ServerSearchView.prototype.handleSpecialKeystrokes = function(e) {
    if (e.keyCode === 27 && this.inputFocused) {
      this.$textbox.val("");
      this.textboxChanged();
    }
    return true;
  };

  ServerSearchView.prototype.remove = function() {
    document.removeEventListener("keydown", this.handleSpecialKeystrokes, true);
    return ServerSearchView.__super__.remove.call(this);
  };

  return ServerSearchView;

})(Backbone.View);

module.exports = ServerSearchView;

},{"../models/serverSearch":20,"../utils/utils":29,"./serverSearchResultsSectionView":58}],60:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var OrderedTableView, PageView, Settings, SettingsView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PageView = require('./pageView');

OrderedTableView = require('./orderedTableView');

Settings = require('../models/settings');

SettingsView = (function(_super) {
  __extends(SettingsView, _super);

  function SettingsView() {
    _ref = SettingsView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  SettingsView.prototype.tagName = "div";

  SettingsView.prototype.template = _.template($("#template-settings").html());

  SettingsView.prototype.initialize = function() {
    this.model = new Settings;
    this.listenToOnce(this.model, "change", this.render);
    return this.model.fetch();
  };

  SettingsView.prototype.render = function() {
    var $content, $page, table;
    console.log(this.model.attributes);
    table = new OrderedTableView({
      items: this.model.get("folderArtNames")
    });
    $page = SettingsView.__super__.render({
      leftAccessory: "sprite-menu",
      rightAccessory: "sprite-play-queue",
      pageTitle: "Settings"
    });
    $content = $page.find(".page-content");
    $content.append(this.template());
    $content.append(table.render().el);
    this.$el.empty().append($page);
    return this;
  };

  return SettingsView;

})(PageView);

module.exports = SettingsView;

},{"../models/settings":21,"./orderedTableView":48,"./pageView":49}],61:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var SidePanelController, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SidePanelController = (function(_super) {
  __extends(SidePanelController, _super);

  function SidePanelController() {
    _ref = SidePanelController.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  SidePanelController.prototype.el = "body";

  SidePanelController.prototype.template = _.template($("#template-side-panels").html());

  SidePanelController.prototype.initialize = function(options) {
    var _this = this;
    if (options != null) {
      this.el = options.el;
      this.$el.prepend(this.template());
      this.left = new options.left;
      this.right = new options.right;
      this.main = options.main;
    }
    return $(window).resize(function() {
      var leftWidth, rightWidth;
      leftWidth = _this.leftActive ? _this.left.$el.width() : 0;
      rightWidth = _this.rightActive ? _this.right.$el.width() : 0;
      return _this.main.$el.removeClass("transitions").css({
        left: leftWidth,
        width: $(window).width() - leftWidth - rightWidth
      }).addClass("transitions");
    });
  };

  SidePanelController.prototype.render = function() {
    if (!wavebox.isMobile()) {
      this.rightActive = true;
      this.leftActive = true;
      this.main.$el.css({
        left: this.left.$el.width(),
        width: $(window).width() - this.left.$el.width() - this.right.$el.width()
      });
      this.main.$el.addClass("transitions");
    } else {
      this.bindTouchEvents();
      FastClick.attach(document.body);
    }
    console.log("rendering left");
    this.left.render();
    console.log("rendering right");
    this.right.render();
    return this;
  };

  SidePanelController.prototype.focusMain = function(callback) {
    this.main.$el.transition({
      x: 0
    }, 200, "ease-out", callback);
    return this.toggledPanel = null;
  };

  SidePanelController.prototype["switch"] = function(panel) {
    if (panel === "right") {
      if (wavebox.isMobile()) {
        this.left.$el.css({
          "display": "none"
        });
      }
      return this.right.$el.css({
        "display": "block"
      });
    } else if (panel === "left") {
      if (wavebox.isMobile()) {
        this.right.$el.css({
          "display": "none"
        });
      }
      return this.left.$el.css({
        "display": "block"
      });
    }
  };

  SidePanelController.prototype.leftToggle = function() {
    var leftwidth;
    if (wavebox.isMobile()) {
      if (this.toggledPanel === null) {
        this["switch"]("left");
        this.main.$el.transition({
          x: this.left.$el.width()
        }, 200, "ease-out");
        return this.toggledPanel = "left";
      } else {
        return this.focusMain();
      }
    } else {
      leftwidth = this.left.$el.width();
      if (!this.leftActive) {
        this.main.$el.css({
          left: leftwidth,
          width: this.main.$el.width() - leftwidth
        });
        return this.leftActive = true;
      } else {
        this.main.$el.css({
          left: 0,
          width: this.main.$el.width() + leftwidth
        });
        return this.leftActive = false;
      }
    }
  };

  SidePanelController.prototype.rightToggle = function(duration) {
    var $this;
    if (duration == null) {
      duration = 200;
    }
    $this = this.main.$el;
    if (wavebox.isMobile()) {
      if (this.toggledPanel === null) {
        this["switch"]("right");
        this.main.$el.transition({
          x: -this.right.$el.width()
        }, duration, "ease-out");
        return this.toggledPanel = "right";
      } else {
        return this.focusMain();
      }
    } else {
      if (!this.rightActive) {
        this["switch"]("right");
        this.main.$el.css({
          width: this.main.$el.width() - this.right.$el.width()
        });
        return this.rightActive = true;
      } else {
        this.main.$el.css({
          width: this.main.$el.width() + this.right.$el.width()
        });
        return this.rightActive = false;
      }
    }
  };

  SidePanelController.prototype.bindTouchEvents = function() {
    /*
    		Touch handling for vertical scrolling of center panel
    */

    var _this = this;
    this.$el.bind("touchstart", function(event) {
      var $target, $top, bottom, position;
      $target = $(event.target);
      $top = $target.parents(".scroll").first();
      bottom = $top[0] != null ? $top[0].scrollHeight - $top.outerHeight() : -$top.outerHeight();
      position = $top.scrollTop();
      if (position === 0) {
        return $top.scrollTop(1);
      } else if (position === bottom) {
        return $top.scrollTop(bottom - 1);
      }
    });
    this.$el.bind("touchmove", function(event) {
      var $anchor, $parents, $scroll, $scrollAnchor, $target;
      $target = $(event.target);
      $parents = $target.parents(".scroll");
      $scrollAnchor = $target.parents(".scrollAnchor");
      if ($scrollAnchor.length > 0) {
        $anchor = $scrollAnchor.first();
        $scroll = $parents.first();
        if ($scroll.height() < $anchor.height()) {
          console.log("anchor height smaller than parent");
          event.preventDefault();
        }
      }
      if (!($parents.length > 0 || $target.hasClass(".scroll"))) {
        console.log("no parent or no scroll");
        return event.preventDefault();
      }
    });
    /*
    		Touch handling for horizontal scrolling of panels
    */

    $('body').bind("touchstart", function(event) {
      var $this;
      if (event.originalEvent.touches.length !== 1) {
        return;
      }
      $this = _this.main.$el;
      _this.originalTimeStamp = event.timeStamp;
      _this.touchStartX = event.originalEvent.touches[0].pageX - $this.offset().left;
      _this.touchStartY = event.originalEvent.touches[0].pageY;
      _this.newTouch = true;
      return _this.scrollType = "none";
    });
    $('body').bind("touchmove", function(event) {
      var $this, differenceX, differenceY, multiplier, timeDiff, velX, velY, x;
      if (event.originalEvent.touches.length !== 1) {
        return;
      }
      $this = _this.main.$el;
      if (_this.newTouch) {
        differenceX = event.originalEvent.touches[0].pageX - $this.offset().left - _this.touchStartX;
        differenceY = event.originalEvent.touches[0].pageY - _this.touchStartY;
        timeDiff = event.timeStamp - _this.originalTimeStamp;
        multiplier = 1000 / timeDiff;
        velX = Math.abs(multiplier * differenceX);
        velY = Math.abs(multiplier * differenceY);
        if (velX > velY) {
          _this.scrollType = "x";
          event.preventDefault();
        }
        /*
        				console.log("time between events: " + (event.timeStamp - @originalTimeStamp))
        				console.log("velX: " + velX)
        				console.log("velY: " + velY)
        				console.log("scrollType " + @scrollType)
        				console.log("@touchStartY: " + @touchStartY)
        				console.log("event.originalEvent.touches[0].pageY: " + event.originalEvent.touches[0].pageY)
        				console.log("difference Y: " + (event.originalEvent.touches[0].pageY - @touchStartY))
        */

        _this.newTouch = false;
      } else if (_this.scrollType === "x") {
        event.preventDefault();
        x = event.originalEvent.touches[0].pageX;
        if (_this.touchStartX < 100 && x < _this.previousX && $this.offset().left <= 0) {
          $this.offset().left = 0;
          return;
        }
        if (_this.touchStartX > $this.width() - 100 && x > _this.previousX && $this.offset().left >= 0) {
          $this.offset().left = 0;
          return;
        }
        _this.pixelsPerSecond = (x - _this.previousX) / (event.timeStamp - _this.previousTime) * 1000;
        if ($this.offset().left < 0) {
          _this["switch"]("right");
        } else {
          _this["switch"]("left");
        }
        $this.css({
          "-webkit-transform": "translate3d(" + (x - _this.touchStartX) + "px, 0, 0)"
        });
      }
      _this.previousX = x;
      return _this.previousTime = event.timeStamp;
    });
    return $('body').bind("touchend", function(event) {
      var futurePosition, left, width;
      if (event.originalEvent.touches.length !== 0 || _this.scrollType !== "x") {
        return;
      }
      width = _this.main.$el.width();
      left = _this.main.$el.offset().left;
      futurePosition = left + _this.pixelsPerSecond;
      left = futurePosition > _this.left.$el.width() * .75 && left > 30 ? (_this.toggledPanel = "left", _this.left.$el.width()) : futurePosition + width < width - (_this.right.$el.width() * .75) && left < -30 ? (_this.toggledPanel = "right", -_this.right.$el.width()) : (_this.toggledPanel = null, 0);
      _this.main.$el.transition({
        x: left
      }, 200, "ease-out");
      return false;
    });
  };

  return SidePanelController;

})(Backbone.View);

module.exports = SidePanelController;

},{}],62:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var ActionSheetView, Playlists, TrackListItemView, Utils, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Utils = require('../utils/utils');

ActionSheetView = require("./actionSheet/actionSheetView");

Playlists = require("../collections/playlists");

TrackListItemView = (function(_super) {
  __extends(TrackListItemView, _super);

  function TrackListItemView() {
    this.showActionSheet = __bind(this.showActionSheet, this);
    this.addToServerPlaylist = __bind(this.addToServerPlaylist, this);
    this.addToPlaylist = __bind(this.addToPlaylist, this);
    this.addNextToQueue = __bind(this.addNextToQueue, this);
    this.addToQueue = __bind(this.addToQueue, this);
    _ref = TrackListItemView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TrackListItemView.prototype.tagName = "div";

  TrackListItemView.prototype.className = "list-track-row";

  TrackListItemView.prototype.template = _.template($("#template-track-list-row").html());

  TrackListItemView.prototype.initialize = function() {
    return this.listenTo(wavebox.audioPlayer, "newSong", this.adjustNowPlaying);
  };

  TrackListItemView.prototype.attributes = {
    "draggable": "true"
  };

  TrackListItemView.prototype.events = {
    "dragstart": function(e) {
      return wavebox.dragDrop.mediaDragStart(this.model);
    },
    "dragend": function() {
      return wavebox.dragDrop.mediaDragEnd();
    },
    "click": "click",
    "touchstart": "beginPress",
    "touchmove": "touchmove",
    "touchend": "endPress",
    "touchcancel": "endPress",
    "contextmenu": "rightClick"
  };

  TrackListItemView.prototype.render = function() {
    this.$el.empty().append(this.template({
      trackNumber: this.model.get("trackNumber"),
      songName: this.model.get("songName"),
      artistName: this.model.get("artistName"),
      duration: Utils.formattedTimeWithSeconds(this.model.get("duration"))
    }));
    return this;
  };

  TrackListItemView.prototype.adjustNowPlaying = function() {
    var currentSong;
    currentSong = wavebox.audioPlayer.playQueue.currentSong();
    if ((currentSong != null) && this.model.get("itemId") === currentSong.get("itemId")) {
      return this.$el.addClass("list-track-now-playing");
    } else if (this.$el.hasClass("list-track-now-playing")) {
      return this.$el.removeClass("list-track-now-playing");
    }
  };

  TrackListItemView.prototype.click = function() {
    this.addToQueue();
    this.highlight();
    return false;
  };

  TrackListItemView.prototype.addToQueue = function() {
    wavebox.audioPlayer.playQueue.add(this.model);
  };

  TrackListItemView.prototype.addNextToQueue = function() {
    wavebox.audioPlayer.playQueue.addNext(this.model);
  };

  TrackListItemView.prototype.addToPlaylist = function() {
    var playlists,
      _this = this;
    playlists = new Playlists;
    playlists.fetch({
      reset: true
    });
    this.listenToOnce(playlists, "reset", function() {
      var items, sheet;
      items = [];
      playlists.each(function(playlist) {
        return items.push({
          "itemTitle": playlist.get("name"),
          "action": function() {
            return _this.addToServerPlaylist(playlist);
          }
        });
      });
      sheet = new ActionSheetView({
        "song": _this.model,
        "items": items
      }).render();
      wavebox.appController.mainView.$el.append(sheet.el);
      sheet.show();
    });
  };

  TrackListItemView.prototype.addToServerPlaylist = function(playlist) {
    console.log("adding item " + (this.model.get("itemId")) + " to playlist " + (playlist.get("id")));
    return wavebox.apiClient.addToPlaylist(playlist.get("id"), this.model.get("itemId"), function(success, data) {
      return console.log("added item with success " + success + " and data " + data);
    });
  };

  TrackListItemView.prototype.showActionSheet = function(origin) {
    var sheet;
    this.actionSheetShown = true;
    sheet = new ActionSheetView({
      song: this.model,
      items: [
        {
          "itemTitle": "Add to play queue",
          "action": this.addToQueue
        }, {
          "itemTitle": "Play next",
          "action": this.addNextToQueue
        }, {
          "itemTitle": "Add to playlist",
          "action": this.addToPlaylist
        }
      ],
      origin: origin
    }).render();
    $(document.body).append(sheet.el);
    sheet.show();
  };

  TrackListItemView.prototype.rightClick = function(e) {
    this.showActionSheet({
      x: e.pageX,
      y: e.pageY
    });
    return false;
  };

  TrackListItemView.prototype.beginPress = function(e) {
    this.touchStartX = e.originalEvent.pageX;
    this.touchStartY = e.originalEvent.pageY;
    this.longPressTimer = setTimeout(this.showActionSheet, 500);
    return true;
  };

  TrackListItemView.prototype.touchmove = function(e) {
    var didMoveX, didMoveY;
    if (!this.cancelSheet) {
      didMoveX = Math.abs(e.originalEvent.pageX - this.touchStartX) > 10;
      didMoveY = Math.abs(e.originalEvent.pageY - this.touchStartY) > 10;
      this.cancelSheet = didMoveX || didMoveY;
      console.log("cancelSheet: " + this.cancelSheet);
      if (this.cancelSheet) {
        clearTimeout(this.longPressTimer);
      }
    }
    return true;
  };

  TrackListItemView.prototype.endPress = function(e) {
    var wasShown;
    clearTimeout(this.longPressTimer);
    this.cancelSheet = false;
    wasShown = this.actionSheetShown;
    this.actionSheetShown = false;
    return !wasShown;
  };

  TrackListItemView.prototype.highlight = function() {
    var $marker;
    $marker = $("<div class='list-track-row-highlight'>");
    this.$el.append($marker);
    return $marker.transit({
      x: $marker.width(),
      opacity: 0
    }, function() {
      return $marker.remove();
    });
  };

  return TrackListItemView;

})(Backbone.View);

module.exports = TrackListItemView;

},{"../collections/playlists":8,"../utils/utils":29,"./actionSheet/actionSheetView":32}],63:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var TrackList, TrackListItemView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TrackListItemView = require("./tracklistitemview");

TrackList = (function(_super) {
  __extends(TrackList, _super);

  function TrackList() {
    _ref = TrackList.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TrackList.prototype.tagName = "div";

  TrackList.prototype.template = _.template($("#template-track-list").html());

  TrackList.prototype.className = "list-track";

  TrackList.prototype.initialize = function(options) {
    if (options != null) {
      this.artId = options.artId || null;
    }
    return window.a = TrackListItemView;
  };

  TrackList.prototype.events = {
    "click .playAll": function(e) {
      var _this = this;
      e.preventDefault();
      console.log(this);
      return this.collection.each(function(track) {
        return wavebox.audioPlayer.playQueue.add(track);
      });
    },
    "click .list-track-header": "switchSortKey"
  };

  TrackList.prototype.render = function() {
    var $header, $temp;
    $temp = $("<div>");
    $header = $("<div class='list-track-row list-track-header'>");
    $header.append(TrackListItemView.prototype.template({
      trackNumber: "#",
      songName: "Title",
      artistName: "Artist",
      duration: "Time"
    }));
    $temp.append($header);
    this.collection.each(function(track) {
      var view;
      view = new TrackListItemView({
        model: track
      });
      return $temp.append(view.render().el);
    });
    this.$el.empty().append($temp.children());
    this.loadArt();
    return this;
  };

  TrackList.prototype.loadArt = function() {
    var art, artUrl,
      _this = this;
    console.log(this);
    if (this.artId != null) {
      console.log("there's an art id!");
      artUrl = wavebox.apiClient.getArtUrl(this.artId, $(window).width());
      art = new Image;
      art.onload = function() {
        return _this.$el.find(".main-albumArt").css("background-image", "url('" + artUrl + "')").children().css("opacity", 0);
      };
      return art.src = artUrl;
    }
  };

  TrackList.prototype.switchSortKey = function(e) {
    var text;
    text = typeof e === 'string' ? e : $(e.target).text();
    console.log(text);
    this.collection.comparator = (function() {
      switch (text) {
        case "Title":
          return "songName";
        case "Artist":
          return "artistName";
        case "Time":
          return "duration";
        case "#":
          return "trackNumber";
      }
    })();
    this.collection.sort();
    return this.render();
  };

  return TrackList;

})(Backbone.View);

module.exports = TrackList;

},{"./tracklistitemview":62}]},{},[1])
;